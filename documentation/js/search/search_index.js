var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.556,1,2.082]],["body/controllers/AppController.html",[0,2.853,1,3.343,2,2.001,3,0.381,4,0.33,5,0.33,6,3.455,7,0.33,8,3.645,9,0.489,10,2.046,11,4.927,12,1.835,13,0.032,14,0.879,15,4.131,16,4.314,17,1.654,18,1.527,19,1.942,20,1.654,21,0.542,22,0.879,23,3.123,24,3.455,25,0.489,26,0.806,27,0.806,28,0.806,29,0.381,30,0.068,31,4.131,32,1.325,33,2.001,34,4.131,35,1.325,36,4.131,37,0.024,38,0.024]],["title/modules/AppModule.html",[39,1.704,40,2.082]],["body/modules/AppModule.html",[1,3.572,2,2.43,3,0.364,4,0.316,5,0.316,7,0.316,8,3.572,13,0.032,21,0.642,22,0.841,23,3.242,24,3.306,29,0.364,30,0.073,37,0.024,38,0.024,39,3.173,40,4.144,41,2.096,42,2.66,43,3.306,44,3.306,45,3.306,46,3.493,47,3.493,48,3.251,49,2.562,50,2.562,51,3.953,52,3.655,53,4.196,54,2.88,55,2.562,56,3.953,57,3.953,58,3.953,59,3.953]],["title/injectables/AppService.html",[23,1.704,60,0.684]],["body/injectables/AppService.html",[3,0.404,4,0.35,5,0.35,7,0.35,8,3.467,9,0.519,10,2.089,11,5.03,13,0.031,14,0.933,16,4.475,17,1.716,18,1.584,19,2.015,20,1.716,21,0.46,22,0.933,23,2.837,29,0.404,30,0.077,35,1.406,37,0.025,38,0.025,60,1.139,61,2.123,62,3.666,63,4.475,64,4.384,65,4.384,66,4.384]],["title/classes/CustomException.html",[30,0.043,67,2.341]],["body/classes/CustomException.html",[3,0.396,4,0.343,5,0.343,7,0.422,13,0.031,14,0.913,21,0.451,22,0.913,25,0.508,29,0.396,30,0.076,32,1.376,37,0.025,38,0.025,67,3.848,68,1.907,69,4.418,70,4.418,71,3.59,72,5.282,73,3.848,74,2.801,75,3.708,76,3.34,77,5.282,78,4.292,79,4.418,80,1.616,81,1.08,82,1.491,83,2.346,84,1.835,85,2.505,86,3.127,87,3.127,88,4.292,89,3.59]],["title/classes/ExceptionExceptionFilter.html",[30,0.043,90,2.341]],["body/classes/ExceptionExceptionFilter.html",[3,0.329,4,0.285,5,0.285,7,0.375,9,0.422,10,1.631,13,0.032,14,0.759,17,1.506,19,1.768,20,1.506,21,0.493,22,0.759,25,0.422,26,0.696,27,0.696,28,0.696,29,0.329,30,0.07,32,1.506,35,1.506,37,0.022,38,0.022,68,1.585,73,3.421,80,1.344,81,0.898,82,1.239,83,1.585,84,1.937,90,4.334,91,3.928,92,3.928,93,2.984,94,3.043,95,5.249,96,3.614,97,4.696,98,5.578,99,5.578,100,3.569,101,0.636,102,4.696,103,2.086,104,2.984,105,3.569,106,5.578,107,2.6,108,3.569,109,3.569,110,3.569,111,3.569,112,3.569,113,3.569,114,3.569,115,2.274,116,3.569,117,1.239,118,3.569,119,3.569,120,3.569,121,3.569,122,3.569,123,3.569,124,3.569,125,2.083,126,3.569]],["title/injectables/JwtAuthGuard.html",[60,0.684,127,2.082]],["body/injectables/JwtAuthGuard.html",[3,0.428,4,0.371,5,0.371,7,0.371,13,0.031,21,0.582,22,0.988,25,0.549,26,0.905,27,0.905,28,0.905,29,0.428,30,0.062,37,0.026,38,0.026,60,1.179,61,2.248,74,2.461,127,3.59,128,3.382,129,3.883,130,3.59,131,4.633,132,4.643,133,3.008,134,4.643]],["title/interfaces/JwtPayload.html",[135,1.427,136,1.876]],["body/interfaces/JwtPayload.html",[3,0.434,4,0.376,5,0.376,7,0.376,9,0.557,13,0.031,18,1.763,29,0.434,37,0.027,38,0.027,101,0.839,135,2.481,136,3.477,137,3.051,138,3.938,139,3.938,140,2.481,141,3.596,142,3.261]],["title/injectables/JwtStrategy.html",[60,0.684,143,1.876]],["body/injectables/JwtStrategy.html",[3,0.317,4,0.275,5,0.275,7,0.366,9,0.407,10,1.593,13,0.032,14,0.976,17,1.47,19,1.726,20,1.47,21,0.601,22,0.732,25,0.407,29,0.317,30,0.073,32,1.47,33,1.667,35,1.104,37,0.022,38,0.022,60,1.17,61,1.667,74,1.825,75,2.23,76,2.009,80,1.726,81,1.154,82,1.593,84,1.593,85,2.009,86,2.508,87,2.508,96,2.23,101,0.817,103,2.037,125,2.009,130,2.971,133,2.23,136,3.209,143,3.209,144,2.879,145,3.341,146,4.599,147,2.879,148,2.442,149,3.442,150,1.384,151,4.585,152,3.756,153,4.585,154,3.442,155,3.835,156,2.23,157,3.442,158,3.442,159,3.442,160,2.879,161,2.508,162,2.879,163,3.442,164,4.585,165,3.442,166,3.442,167,3.442,168,3.442,169,2.508,170,3.442,171,2.508,172,2.23,173,2.879,174,3.442,175,2.508,176,2.508,177,2.879,178,3.442]],["title/classes/LoginDto.html",[30,0.043,179,1.876]],["body/classes/LoginDto.html",[3,0.348,4,0.301,5,0.301,7,0.301,9,0.446,12,2.163,13,0.032,14,1.036,18,1.686,21,0.396,25,0.446,26,0.736,27,0.736,28,0.736,29,0.348,30,0.065,37,0.023,38,0.023,68,1.676,81,1.434,83,2.163,101,0.867,140,2.163,141,3.147,150,1.597,179,2.842,180,3.155,181,4.869,182,4.072,183,4.078,184,4.072,185,2.145,186,3.772,187,4.869,188,4.869,189,4.072,190,3.772,191,5.14,192,3.155,193,3.021,194,3.772,195,4.869,196,3.494,197,2,198,3.772]],["title/interfaces/Response.html",[103,1.427,135,1.427]],["body/interfaces/Response.html",[3,0.353,4,0.306,5,0.306,7,0.306,9,0.454,13,0.032,17,1.229,20,1.229,21,0.571,22,0.816,25,0.454,26,0.748,27,0.748,28,0.748,29,0.454,30,0.076,32,1.578,35,1.578,37,0.023,38,0.023,60,1.047,84,1.709,94,2.484,101,0.683,103,2.546,107,4.419,135,2.414,137,2.484,140,2.186,199,2.793,200,2.793,201,4.544,202,4.115,203,4.115,204,4.115,205,3.958,206,4.115,207,3.584,208,2.484,209,3.206,210,3.206,211,3.188,212,2.793,213,4.115,214,3.206,215,3.206,216,3.206,217,3.206]],["title/guards/RolesGuard.html",[218,2.341,219,2.082]],["body/guards/RolesGuard.html",[3,0.311,4,0.269,5,0.269,7,0.408,9,0.399,10,1.894,13,0.032,14,0.962,17,1.45,19,1.703,20,1.45,21,0.597,22,0.718,25,0.399,29,0.311,30,0.045,32,1.45,33,1.633,35,1.636,37,0.021,38,0.021,60,1.16,76,1.968,80,1.703,81,1.138,82,1.571,84,1.894,94,2.185,101,0.806,131,4.561,142,2.979,150,1.138,205,3.973,207,3.718,208,2.185,212,3.295,219,2.93,220,2.82,221,5.453,222,3.372,223,5.103,224,3.372,225,5.453,226,4.522,227,3.372,228,4.522,229,3.782,230,2.64,231,2.82,232,2.456,233,3.372,234,2.398,235,2.456,236,3.372,237,5.103,238,3.295,239,3.372,240,3.372,241,3.372,242,3.372,243,2.185,244,3.372,245,2.185,246,3.372,247,3.372]],["title/entities/TicketBooking.html",[248,1.876,249,1.21]],["body/entities/TicketBooking.html",[3,0.219,4,0.19,5,0.19,7,0.19,9,0.281,12,2.663,13,0.032,14,1.276,18,1.756,21,0.49,25,0.281,26,0.463,27,0.463,28,0.463,29,0.219,30,0.032,37,0.017,38,0.017,81,1.475,101,1.101,115,2.413,117,1.62,140,1.568,150,1.428,185,1.876,189,2.953,193,3.106,243,2.288,248,2.061,249,1.756,250,1.731,251,1.987,252,2.953,253,3.531,254,2.572,255,3.229,256,4.167,257,3.229,258,3.523,259,3.523,260,3.523,261,4.167,262,3.523,263,2.359,264,5.268,265,2.376,266,2.376,267,3.531,268,3.531,269,2.376,270,3.9,271,3.9,272,2.376,273,3.523,274,2.376,275,3.531,276,3.531,277,3.531,278,3.939,279,2.953,280,4.207,281,3.397,282,2.953,283,2.376,284,3.531,285,3.531,286,2.376,287,2.866,288,2.73,289,2.376,290,2.288,291,1.987,292,2.376,293,2.376,294,2.953,295,3.531,296,2.376,297,2.376,298,2.953,299,2.376,300,3.531,301,2.376,302,1.731,303,3.531,304,1.387,305,1.987,306,1.54,307,2.376,308,2.376,309,1.987,310,2.376]],["title/controllers/TicketController.html",[0,1.556,311,2.082]],["body/controllers/TicketController.html",[0,0.682,2,0.682,3,0.13,4,0.112,5,0.112,7,0.502,9,0.167,10,0.811,12,1.963,13,0.032,14,0.94,17,1.749,18,0.886,19,2.054,20,1.749,21,0.486,22,0.3,25,0.167,26,0.274,27,0.274,28,0.274,29,0.13,30,0.019,32,1.628,33,0.682,35,1.483,37,0.011,38,0.011,80,1.663,81,1.518,82,1.535,84,1.942,85,0.822,89,3.488,101,0.855,115,3.038,117,0.489,127,0.912,128,1.025,185,2.418,191,4.423,219,0.912,230,2.801,234,0.746,243,2.997,245,0.912,249,1.57,263,2.161,287,3.396,288,2.259,290,3.484,311,2.259,312,1.177,313,1.177,314,2.916,315,2.916,316,1.954,317,2.916,318,2.916,319,1.954,320,1.177,321,3.867,322,3.486,323,3.917,324,3.974,325,4.418,326,3.867,327,1.408,328,1.408,329,3.581,330,1.177,331,1.408,332,1.408,333,1.177,334,2.916,335,1.408,336,1.408,337,3.486,338,2.259,339,3.486,340,3.486,341,1.177,342,3.486,343,1.408,344,1.408,345,1.177,346,2.963,347,1.408,348,1.408,349,1.408,350,1.408,351,1.954,352,1.408,353,2.916,354,1.408,355,1.408,356,1.177,357,1.408,358,1.408,359,1.408,360,1.702,361,1.177,362,3.234,363,1.408,364,1.177,365,1.177,366,1.408,367,2.336,368,2.336,369,4.798,370,4.418,371,4.624,372,4.418,373,1.177,374,0.912,375,1.408,376,1.408,377,1.408,378,1.408,379,1.177,380,2.05,381,1.177,382,1.177,383,1.408,384,1.408,385,1.025,386,0.912,387,0.912,388,1.408,389,3.867,390,1.408,391,1.408,392,1.408,393,4.418,394,1.408,395,1.408,396,1.408,397,1.408,398,1.408,399,1.408,400,1.408,401,1.408,402,1.177,403,2.505,404,1.514,405,1.177,406,1.408,407,1.408,408,1.408,409,1.408,410,1.408,411,1.408,412,1.408,413,1.408,414,1.408,415,1.177,416,1.177,417,1.408,418,1.408,419,1.408]],["title/classes/TicketDto.html",[30,0.043,346,1.876]],["body/classes/TicketDto.html",[3,0.161,4,0.14,5,0.14,7,0.14,9,0.207,12,2.303,13,0.032,14,1.193,18,1.681,21,0.455,25,0.207,26,0.341,27,0.341,28,0.341,29,0.161,30,0.053,37,0.013,38,0.013,68,0.778,79,2.334,81,1.595,83,2.815,101,1.024,115,1.685,140,1.24,150,1.162,185,1.632,193,3.012,196,3.443,197,0.928,255,3.516,256,4.052,257,3.633,258,3.625,259,2.909,260,2.909,261,3.625,262,2.909,263,2.256,270,5.262,271,4.856,278,2.534,287,3.012,288,3.828,294,2.334,298,4.751,302,1.276,305,1.464,306,1.135,346,1.629,374,1.135,420,1.464,421,5.184,422,1.464,423,4.444,424,2.334,425,1.751,426,4.444,427,2.033,428,2.909,429,1.751,430,2.791,431,1.751,432,3.319,433,2.791,434,3.862,435,2.909,436,3.364,437,4.206,438,1.751,439,2.791,440,1.464,441,1.464,442,2.033,443,1.751,444,1.751,445,1.751,446,2.791,447,1.464,448,2.334,449,1.751,450,2.791,451,1.751,452,2.791,453,3.968,454,1.751,455,3.968,456,1.751,457,2.791,458,2.791,459,1.751,460,1.751,461,1.751,462,2.334,463,5.314,464,3.479,465,2.891,466,3.157,467,1.276,468,1.276,469,4.335,470,1.464,471,3.319,472,2.909,473,1.464,474,1.464,475,1.464,476,1.464,477,2.791,478,2.791]],["title/modules/TicketModule.html",[39,1.704,46,1.876]],["body/modules/TicketModule.html",[2,1.938,3,0.369,4,0.32,5,0.32,7,0.32,13,0.032,21,0.662,22,0.851,25,0.474,26,0.78,27,0.78,28,0.78,29,0.369,30,0.053,37,0.024,38,0.024,39,3.087,41,2.121,42,2.68,46,3.636,48,3.276,49,2.593,50,2.593,52,2.915,54,2.915,55,2.593,148,1.777,150,1.007,249,1.506,287,2.68,302,2.915,311,3.276,380,3.184,381,3.346,479,3.346,480,3.346,481,4.001,482,3.346,483,4.001,484,3.346,485,2.121,486,3.346,487,4.001,488,3.346,489,4.001,490,4.001]],["title/classes/TicketRepository.html",[30,0.043,485,1.704]],["body/classes/TicketRepository.html",[3,0.311,4,0.27,5,0.27,7,0.408,9,0.4,10,1.573,13,0.032,14,0.964,17,1.75,19,2.055,20,1.75,21,0.536,25,0.4,26,0.659,27,0.659,28,0.659,29,0.311,30,0.045,32,1.452,35,1.638,37,0.021,38,0.021,68,1.501,74,2.401,80,1.705,81,1.286,82,1.573,84,1.896,101,0.807,115,1.636,145,3.796,156,2.935,172,3.31,185,2.319,249,1.272,263,2.393,287,2.401,304,1.972,306,2.189,484,2.826,485,2.401,491,2.826,492,3.322,493,4.529,494,3.787,495,4.529,496,5.458,497,4.564,498,4.529,499,3.379,500,4.529,501,3.379,502,2.826,503,3.379,504,3.379,505,5.108,506,5.108,507,4.529,508,3.379,509,3.379,510,3.379,511,3.379,512,2.461,513,4.529,514,3.379]],["title/injectables/TicketService.html",[60,0.684,380,1.704]],["body/injectables/TicketService.html",[3,0.143,4,0.123,5,0.123,7,0.397,9,0.183,10,0.877,13,0.032,14,1.022,17,1.791,18,1.672,19,2.103,20,1.741,21,0.427,22,0.329,25,0.183,26,0.301,27,0.301,28,0.301,29,0.143,30,0.021,32,1.638,33,0.749,35,1.539,37,0.012,38,0.012,60,0.537,61,0.749,75,1.002,76,0.902,80,1.808,81,1.387,82,1.668,83,2.51,84,2.002,85,0.902,96,3.111,101,0.855,103,2.602,115,0.749,117,1.282,125,3.298,145,3.847,148,1.639,152,2.33,156,2.072,171,3.721,172,3.31,175,3.498,176,4.117,185,2.103,230,2.899,238,3.955,249,0.95,263,2.218,287,3.148,288,1.635,290,2.827,306,1.002,314,3.087,315,3.087,316,2.111,317,3.087,318,3.087,319,2.111,320,2.111,323,1.126,324,2.963,329,3.31,330,2.111,333,2.111,338,1.635,341,2.111,345,2.111,346,2.802,351,2.111,356,2.111,379,1.293,380,1.957,385,1.839,386,1.635,387,1.635,402,1.293,403,2.111,404,1.635,482,1.293,485,1.957,486,1.293,492,1.473,497,2.111,512,2.689,515,1.293,516,1.546,517,1.546,518,3.198,519,1.546,520,2.524,521,1.546,522,2.524,523,1.546,524,1.546,525,1.546,526,1.546,527,1.546,528,1.546,529,1.293,530,1.293,531,1.546,532,1.546,533,1.546,534,1.546,535,1.546,536,1.546,537,1.546,538,1.546,539,4.154,540,1.293,541,1.293,542,1.293,543,1.293,544,1.546,545,2.524,546,3.85,547,1.546,548,1.546,549,1.546,550,1.546,551,2.524,552,1.546,553,1.293,554,1.546,555,1.293,556,1.293,557,1.546,558,1.546,559,1.546,560,1.546]],["title/injectables/TransformInterceptor.html",[60,0.684,211,2.082]],["body/injectables/TransformInterceptor.html",[3,0.34,4,0.295,5,0.295,7,0.383,9,0.436,10,1.667,13,0.032,14,0.785,17,1.539,20,1.539,21,0.56,22,0.785,25,0.436,26,0.719,27,0.719,28,0.719,29,0.442,30,0.075,32,1.539,35,1.539,37,0.023,38,0.023,60,1.021,61,1.786,80,1.389,81,0.928,82,1.281,84,1.962,94,2.39,101,0.657,103,2.132,107,3.886,135,2.132,199,3.496,200,2.687,201,3.084,202,3.084,203,3.084,204,4.013,205,4.374,206,4.724,207,3.886,208,2.39,209,3.084,210,3.084,211,3.661,212,3.496,213,4.724,214,4.013,215,4.013,216,3.084,217,3.084,561,4.799,562,3.688]],["title/entities/User.html",[150,0.809,248,1.876]],["body/entities/User.html",[3,0.25,4,0.216,5,0.216,7,0.216,9,0.32,12,2.605,13,0.032,14,1.248,18,1.705,21,0.521,25,0.32,26,0.528,27,0.528,28,0.528,29,0.25,30,0.066,37,0.018,38,0.018,81,1.516,101,1.06,117,1.723,140,1.725,141,2.651,150,1.605,183,3.404,185,2.12,192,2.517,193,3.227,196,1.755,197,1.436,234,3.155,235,1.973,243,2.517,248,2.267,249,2.208,250,1.973,252,3.248,254,2.829,255,3.404,257,3.404,263,2.353,264,5.136,273,4.393,279,2.265,280,3.614,281,2.829,282,2.265,291,2.265,304,1.581,309,3.798,465,1.973,466,1.973,467,1.973,468,1.973,563,2.265,564,3.884,565,3.798,566,2.708,567,2.708,568,2.708,569,2.708,570,2.708,571,2.708,572,2.708,573,3.248,574,2.708,575,3.248,576,2.708,577,3.884,578,2.708,579,1.973,580,3.884,581,2.708]],["title/controllers/UserController.html",[0,1.556,582,2.082]],["body/controllers/UserController.html",[0,1.889,2,1.014,3,0.193,4,0.167,5,0.167,7,0.427,9,0.248,10,1.114,12,2.3,13,0.032,14,1.102,17,1.893,18,1.155,19,2.223,20,1.893,21,0.495,22,0.445,25,0.248,26,0.408,27,0.408,28,0.408,29,0.193,30,0.043,32,1.793,33,1.014,35,1.66,37,0.015,38,0.015,60,0.445,73,2.842,80,1.95,81,1.452,82,1.799,84,1.942,101,0.923,117,1.975,150,1.572,179,2.277,185,2.279,230,3.023,263,2.033,313,1.751,329,3.826,338,3.224,353,2.683,360,2.337,361,1.751,362,2.683,364,1.751,365,1.751,373,1.751,374,1.356,382,1.751,386,1.356,387,1.356,404,2.079,415,1.751,416,1.751,582,2.079,583,1.751,584,2.683,585,2.683,586,3.657,587,2.683,588,3.944,589,2.683,590,4.581,591,1.751,592,3.208,593,2.093,594,2.683,595,3.41,596,3.208,597,2.093,598,4.373,599,1.751,600,3.208,601,2.093,602,1.751,603,3.208,604,2.093,605,3.208,606,3.208,607,3.901,608,3.901,609,1.751,610,3.208,611,2.093,612,3.208,613,1.751,614,3.208,615,2.093,616,2.683,617,1.751,618,3.208,619,2.093,620,3.208,621,1.751,622,1.751,623,2.318,624,1.751,625,2.093,626,2.093,627,2.093,628,2.093,629,2.093,630,1.751,631,2.093,632,2.093,633,2.093,634,2.093,635,2.093,636,2.093,637,2.093,638,1.751,639,2.093,640,2.093,641,2.093]],["title/classes/UserDto.html",[30,0.043,595,1.876]],["body/classes/UserDto.html",[3,0.186,4,0.161,5,0.161,7,0.161,9,0.238,12,2.176,13,0.032,14,1.153,18,1.638,21,0.4,25,0.238,26,0.393,27,0.393,28,0.393,29,0.186,30,0.057,37,0.015,38,0.015,68,0.895,81,1.564,83,2.836,101,0.965,117,1.488,140,1.383,141,2.223,142,1.818,150,1.657,182,2.605,183,3.51,184,4.097,185,1.744,192,3.174,193,2.933,196,3.31,197,1.068,234,2.597,235,1.467,249,1.844,255,3.65,257,3.753,263,2.417,422,1.684,423,4.782,424,2.605,426,4.782,427,2.269,428,3.584,432,2.605,434,2.605,435,2.605,436,3.569,437,4.413,440,1.684,441,1.684,442,2.269,447,1.684,448,4.097,462,2.605,465,2.774,466,2.774,467,1.467,468,1.467,469,4.097,470,3.185,471,3.875,472,3.584,473,1.684,474,1.684,475,1.684,476,1.684,565,4.53,573,2.605,579,1.467,595,1.818,642,1.684,643,2.014,644,2.014,645,3.114,646,3.114,647,2.014,648,2.014,649,2.014,650,2.014,651,2.014,652,2.014,653,2.014,654,4.285,655,2.014,656,3.114,657,3.808,658,2.014,659,2.014,660,3.114,661,2.014,662,3.114,663,2.014,664,2.014]],["title/modules/UserModule.html",[39,1.704,47,1.876]],["body/modules/UserModule.html",[2,2.242,3,0.322,4,0.279,5,0.279,7,0.279,13,0.032,21,0.663,22,0.743,25,0.413,29,0.322,30,0.061,37,0.022,38,0.022,39,3.051,41,1.852,42,2.455,47,3.619,48,3,49,2.263,50,2.263,52,3.373,53,2.921,54,3.784,55,2.263,60,1.177,86,2.545,87,2.545,130,2.263,133,2.263,143,3.655,148,1.552,150,1.392,161,2.545,249,1.315,485,1.852,488,3.872,579,2.545,582,3.366,623,3.051,624,2.921,665,2.921,666,2.921,667,2.921,668,3.493,669,3.493,670,2.545,671,3.493,672,3.493,673,3.493,674,3.493,675,2.921,676,3.493,677,3.493,678,3.493,679,3.493,680,3.493,681,3.493,682,3.493,683,3.493,684,3.493,685,3.493,686,3.493,687,3.493,688,3.493]],["title/classes/UserRepository.html",[30,0.043,148,1.427]],["body/classes/UserRepository.html",[3,0.417,4,0.362,5,0.362,7,0.362,13,0.031,21,0.573,25,0.536,26,0.883,27,0.883,28,0.883,29,0.417,30,0.078,37,0.026,38,0.026,68,2.011,74,2.893,148,2.424,150,1.474,304,2.643,492,3.632,494,4.564,502,3.787,675,3.787,689,3.787,690,5.457,691,5.457,692,4.528]],["title/injectables/UserService.html",[60,0.684,623,1.704]],["body/injectables/UserService.html",[3,0.137,4,0.119,5,0.119,7,0.318,9,0.176,10,0.849,13,0.032,14,1.006,17,1.75,18,1.615,19,2.054,20,1.75,21,0.475,22,0.317,25,0.176,26,0.29,27,0.29,28,0.29,29,0.137,30,0.06,32,1.617,33,0.72,35,1.516,37,0.012,38,0.012,60,0.52,61,0.72,63,3.016,75,0.964,76,0.868,80,1.78,81,1.425,82,1.642,83,2.424,84,1.253,85,0.868,96,2.934,101,0.842,103,2.54,117,1.642,125,3.305,136,1.427,141,0.868,145,3.796,146,2.045,147,1.244,148,1.602,150,1.562,152,2.268,155,1.244,156,2.017,161,1.084,162,1.244,171,3.445,172,3.419,173,1.244,175,3.298,176,4.125,177,1.244,179,1.817,183,2.337,185,2.022,192,1.584,193,0.789,230,2.643,238,4.08,263,1.75,323,2.268,324,3.121,329,2.776,334,2.045,338,1.584,360,1.781,385,1.781,386,1.584,387,1.584,389,2.045,404,2.337,405,2.045,492,1.427,529,1.244,530,1.244,539,3.583,540,1.244,541,1.244,542,1.244,546,3.016,553,1.244,555,1.244,556,1.244,584,2.045,585,3.016,586,3.016,587,2.045,588,2.604,589,2.045,590,3.786,591,2.045,594,2.045,595,3.135,599,2.045,602,2.045,609,2.045,613,2.045,616,2.045,617,1.244,621,1.244,622,1.244,623,1.296,630,1.244,638,1.244,670,1.084,693,1.244,694,3.985,695,1.488,696,2.445,697,1.488,698,1.488,699,2.445,700,1.488,701,1.488,702,1.488,703,1.488,704,1.488,705,1.488,706,1.488,707,1.488,708,1.244,709,1.488,710,1.488,711,2.445,712,1.488,713,3.113,714,1.488,715,1.488,716,1.488,717,1.488,718,2.445,719,2.445,720,1.488,721,2.445,722,1.488,723,1.488,724,2.445,725,1.488,726,2.445,727,1.488,728,1.488,729,1.488,730,1.488,731,2.445,732,1.488,733,1.488,734,1.488,735,1.488,736,3.113,737,2.445,738,2.445,739,1.488,740,1.488,741,1.488,742,2.445,743,1.488,744,1.488,745,1.488,746,1.488,747,1.488,748,2.445]],["title/interfaces/ValidationPipeOptions.html",[135,1.427,749,2.341]],["body/interfaces/ValidationPipeOptions.html",[3,0.369,4,0.32,5,0.32,7,0.32,9,0.474,13,0.032,21,0.42,25,0.474,26,0.78,27,0.78,28,0.78,29,0.369,30,0.053,37,0.024,38,0.024,74,2.68,82,2.131,83,2.587,101,0.987,135,2.462,137,2.593,140,2.246,169,3.683,197,2.121,229,5.13,749,4.242,750,3.346,751,5.543,752,5.824,753,5.824,754,5.824,755,5.056,756,5.056,757,5.056,758,5.056,759,5.056,760,4.001]],["title/coverage.html",[761,3.189]],["body/coverage.html",[0,2.482,1,2.203,5,0.271,6,2.843,13,0.031,23,1.802,30,0.079,37,0.022,38,0.022,60,1.249,62,2.843,67,2.477,69,2.843,70,2.843,71,2.843,90,2.477,91,2.843,92,2.843,93,2.843,101,0.606,103,1.51,125,1.984,127,2.203,128,2.477,129,2.843,135,2.276,136,1.984,138,2.843,139,2.843,143,1.984,144,2.843,148,1.51,150,0.856,169,2.477,179,1.984,180,2.843,199,3.313,200,3.313,211,2.203,218,2.477,219,2.203,220,2.843,232,2.477,245,2.203,248,2.654,249,1.28,251,2.843,254,2.477,311,2.203,312,2.843,346,1.984,380,1.802,420,2.843,436,4.806,485,1.802,491,2.843,515,2.843,563,2.843,582,2.203,583,2.843,595,1.984,623,1.802,642,2.843,689,2.843,693,2.843,749,2.477,750,2.843,761,2.477,762,3.399,763,3.399,764,3.399,765,5.993,766,3.399,767,2.843,768,2.843,769,5.993,770,3.399,771,4.547,772,5.471,773,4.547,774,3.399,775,3.803,776,4.547,777,3.399]],["title/dependencies.html",[42,2.048,778,2.687]],["body/dependencies.html",[13,0.032,22,0.875,30,0.068,37,0.024,38,0.024,42,2.179,55,2.664,104,4.301,130,2.664,133,2.664,160,4.694,197,2.179,208,2.664,231,3.438,304,2.399,374,2.664,670,2.995,708,3.438,779,4.111,780,4.111,781,5.881,782,4.111,783,4.111,784,4.111,785,4.111,786,4.111,787,4.111,788,4.111,789,4.111,790,4.111,791,4.111,792,4.111,793,4.111,794,4.111,795,4.111,796,5.143,797,4.111,798,4.111,799,4.111,800,4.111,801,4.111,802,4.111,803,4.111,804,4.111,805,4.111,806,4.111,807,4.111,808,4.111,809,4.111,810,4.111,811,4.111,812,4.111,813,4.111,814,4.111]],["title/miscellaneous/enumerations.html",[815,1.425,816,3.231]],["body/miscellaneous/enumerations.html",[9,0.536,13,0.031,30,0.072,37,0.026,38,0.026,115,2.837,117,1.573,142,2.643,150,1.474,234,2.893,278,3.976,280,3.299,290,3.536,512,3.976,575,3.787,815,2.401,816,3.787,817,4.528,818,4.528,819,4.528,820,4.528,821,4.528,822,5.457,823,5.287,824,4.528,825,5.457,826,4.528]],["title/miscellaneous/functions.html",[815,1.425,827,3.231]],["body/miscellaneous/functions.html",[9,0.595,13,0.028,30,0.067,37,0.028,38,0.028,767,4.202,768,5.117,815,2.664,827,4.202,828,5.024,829,5.024]],["title/index.html",[9,0.318,830,2.687,831,2.687]],["body/index.html",[4,0.321,7,0.321,8,2.605,13,0.031,25,0.476,37,0.024,38,0.024,117,1.397,492,2.347,543,3.362,761,2.929,832,4.021,833,4.021,834,5.071,835,4.021,836,4.021,837,4.021,838,4.021,839,4.021,840,4.021,841,5.555,842,4.021,843,4.021,844,4.021,845,6.236,846,4.021,847,4.021,848,6.142,849,4.021,850,4.021,851,5.071,852,4.021,853,4.021,854,4.021,855,4.021,856,5.071,857,5.071,858,4.021,859,4.021,860,4.021,861,5.071,862,5.071,863,4.021,864,4.021,865,4.021,866,4.021,867,4.021,868,3.362,869,4.021,870,4.021,871,4.021,872,4.021,873,4.021,874,4.021,875,4.021,876,4.021,877,4.021,878,4.021,879,4.021,880,4.021,881,4.021,882,4.021,883,4.021]],["title/modules.html",[41,2.321]],["body/modules.html",[13,0.027,37,0.027,38,0.027,40,3.197,41,2.616,46,2.88,47,2.88,868,5.079,884,6.073,885,6.073,886,6.073]],["title/overview.html",[887,3.661]],["body/overview.html",[2,2.042,13,0.03,23,3.009,37,0.025,38,0.025,40,4.125,41,2.235,42,2.769,43,3.526,44,3.526,45,3.526,46,3.56,47,3.716,48,3.385,49,2.732,50,2.732,61,2.042,68,1.873,137,2.732,143,3.677,218,3.071,250,3.071,380,3.009,427,4.135,442,3.071,479,3.526,480,3.526,623,3.009,665,3.526,666,3.526,667,3.526,887,3.526,888,4.216,889,4.216,890,4.216]],["title/miscellaneous/variables.html",[815,1.425,891,3.231]],["body/miscellaneous/variables.html",[9,0.559,13,0.03,18,1.398,37,0.027,38,0.027,101,0.997,117,1.64,142,2.756,232,4.077,234,2.504,245,4.136,281,4.077,775,3.949,815,2.504,823,4.68,891,3.949,892,5.596,893,4.722,894,4.722,895,4.722]]],"invertedIndex":[["",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CustomException.html":{},"classes/ExceptionExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"entities/TicketBooking.html":{},"controllers/TicketController.html":{},"classes/TicketDto.html":{},"modules/TicketModule.html":{},"classes/TicketRepository.html":{},"injectables/TicketService.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"interfaces/ValidationPipeOptions.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":556,"title":{},"body":{"injectables/TicketService.html":{},"injectables/UserService.html":{}}}],["0.1.13",{"_index":808,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":794,"title":{},"body":{"dependencies.html":{}}}],["0.2.41",{"_index":814,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":793,"title":{},"body":{"dependencies.html":{}}}],["0.5.2",{"_index":802,"title":{},"body":{"dependencies.html":{}}}],["1",{"_index":890,"title":{},"body":{"overview.html":{}}}],["1.0.0",{"_index":805,"title":{},"body":{"dependencies.html":{}}}],["1.0.2",{"_index":785,"title":{},"body":{"dependencies.html":{}}}],["1.1.18",{"_index":780,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":769,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":654,"title":{},"body":{"classes/UserDto.html":{}}}],["10/10",{"_index":774,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":436,"title":{},"body":{"classes/TicketDto.html":{},"classes/UserDto.html":{},"coverage.html":{}}}],["1062",{"_index":541,"title":{},"body":{"injectables/TicketService.html":{},"injectables/UserService.html":{}}}],["14/14",{"_index":770,"title":{},"body":{"coverage.html":{}}}],["180s",{"_index":683,"title":{},"body":{"modules/UserModule.html":{}}}],["2",{"_index":888,"title":{},"body":{"overview.html":{}}}],["2.18.1",{"_index":799,"title":{},"body":{"dependencies.html":{}}}],["2.3.3",{"_index":801,"title":{},"body":{"dependencies.html":{}}}],["2.4.3",{"_index":788,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":765,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":427,"title":{},"body":{"classes/TicketDto.html":{},"classes/UserDto.html":{},"overview.html":{}}}],["3.0.2",{"_index":810,"title":{},"body":{"dependencies.html":{}}}],["3.6.0",{"_index":791,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":772,"title":{},"body":{"coverage.html":{}}}],["4.0.0",{"_index":803,"title":{},"body":{"dependencies.html":{}}}],["4.13.1",{"_index":797,"title":{},"body":{"dependencies.html":{}}}],["4.3.0",{"_index":813,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":766,"title":{},"body":{"coverage.html":{}}}],["401",{"_index":740,"title":{},"body":{"injectables/UserService.html":{}}}],["5.2.0",{"_index":786,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":442,"title":{},"body":{"classes/TicketDto.html":{},"classes/UserDto.html":{},"overview.html":{}}}],["7",{"_index":889,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":811,"title":{},"body":{"dependencies.html":{}}}],["8.0.0",{"_index":781,"title":{},"body":{"dependencies.html":{}}}],["8.0.3",{"_index":787,"title":{},"body":{"dependencies.html":{}}}],["8.1.0",{"_index":782,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":771,"title":{},"body":{"coverage.html":{}}}],["9/9",{"_index":773,"title":{},"body":{"coverage.html":{}}}],["activate",{"_index":228,"title":{},"body":{"guards/RolesGuard.html":{}}}],["added",{"_index":660,"title":{},"body":{"classes/UserDto.html":{}}}],["admin",{"_index":825,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["again",{"_index":553,"title":{},"body":{"injectables/TicketService.html":{},"injectables/UserService.html":{}}}],["age",{"_index":255,"title":{},"body":{"entities/TicketBooking.html":{},"classes/TicketDto.html":{},"entities/User.html":{},"classes/UserDto.html":{}}}],["alllow",{"_index":285,"title":{},"body":{"entities/TicketBooking.html":{}}}],["already",{"_index":542,"title":{},"body":{"injectables/TicketService.html":{},"injectables/UserService.html":{}}}],["amazing",{"_index":869,"title":{},"body":{"index.html":{}}}],["amount",{"_index":268,"title":{},"body":{"entities/TicketBooking.html":{}}}],["another",{"_index":544,"title":{},"body":{"injectables/TicketService.html":{}}}],["apibody",{"_index":367,"title":{},"body":{"controllers/TicketController.html":{}}}],["apibody({description",{"_index":347,"title":{},"body":{"controllers/TicketController.html":{}}}],["apicreatedresponse",{"_index":368,"title":{},"body":{"controllers/TicketController.html":{}}}],["apiinternalservererrorresponse",{"_index":369,"title":{},"body":{"controllers/TicketController.html":{}}}],["apinotfoundresponse",{"_index":370,"title":{},"body":{"controllers/TicketController.html":{}}}],["apiokresponse",{"_index":371,"title":{},"body":{"controllers/TicketController.html":{}}}],["apiokresponse({description",{"_index":352,"title":{},"body":{"controllers/TicketController.html":{}}}],["apiparam",{"_index":372,"title":{},"body":{"controllers/TicketController.html":{}}}],["apiparam({name",{"_index":321,"title":{},"body":{"controllers/TicketController.html":{}}}],["apiproperty",{"_index":463,"title":{},"body":{"classes/TicketDto.html":{}}}],["apiproperty()@isnotempty({message",{"_index":421,"title":{},"body":{"classes/TicketDto.html":{}}}],["apitags",{"_index":373,"title":{},"body":{"controllers/TicketController.html":{},"controllers/UserController.html":{}}}],["apitags('ticket",{"_index":383,"title":{},"body":{"controllers/TicketController.html":{}}}],["apitags('user",{"_index":625,"title":{},"body":{"controllers/UserController.html":{}}}],["app",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"index.html":{}}}],["app.controller",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":840,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":40,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":23,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argumentshost",{"_index":99,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{}}}],["async",{"_index":145,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/TicketRepository.html":{},"injectables/TicketService.html":{},"injectables/UserService.html":{}}}],["auth.guard",{"_index":375,"title":{},"body":{"controllers/TicketController.html":{}}}],["auth.guard.ts",{"_index":129,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["authguard",{"_index":132,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":134,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["author",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"classes/CustomException.html":{},"classes/ExceptionExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"entities/TicketBooking.html":{},"controllers/TicketController.html":{},"classes/TicketDto.html":{},"modules/TicketModule.html":{},"classes/TicketRepository.html":{},"injectables/TicketService.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"interfaces/ValidationPipeOptions.html":{},"index.html":{}}}],["await",{"_index":172,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/TicketRepository.html":{},"injectables/TicketService.html":{},"injectables/UserService.html":{}}}],["backers",{"_index":870,"title":{},"body":{"index.html":{}}}],["bcrypt",{"_index":707,"title":{},"body":{"injectables/UserService.html":{}}}],["bcrypt.compare(userlogin.password",{"_index":728,"title":{},"body":{"injectables/UserService.html":{}}}],["bcrypt.gensalt",{"_index":712,"title":{},"body":{"injectables/UserService.html":{}}}],["bcrypt.hash(password",{"_index":714,"title":{},"body":{"injectables/UserService.html":{}}}],["bcryptjs",{"_index":708,"title":{},"body":{"injectables/UserService.html":{},"dependencies.html":{}}}],["body",{"_index":360,"title":{},"body":{"controllers/TicketController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["book/cancel",{"_index":452,"title":{},"body":{"classes/TicketDto.html":{}}}],["booked",{"_index":290,"title":{},"body":{"entities/TicketBooking.html":{},"controllers/TicketController.html":{},"injectables/TicketService.html":{},"miscellaneous/enumerations.html":{}}}],["booking",{"_index":288,"title":{},"body":{"entities/TicketBooking.html":{},"controllers/TicketController.html":{},"classes/TicketDto.html":{},"injectables/TicketService.html":{}}}],["boolean",{"_index":229,"title":{},"body":{"guards/RolesGuard.html":{},"interfaces/ValidationPipeOptions.html":{}}}],["bootstrap",{"_index":768,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":886,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":884,"title":{},"body":{"modules.html":{}}}],["builder",{"_index":340,"title":{},"body":{"controllers/TicketController.html":{}}}],["building",{"_index":835,"title":{},"body":{"index.html":{}}}],["business",{"_index":386,"title":{},"body":{"controllers/TicketController.html":{},"injectables/TicketService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["cache",{"_index":789,"title":{},"body":{"dependencies.html":{}}}],["callhandler",{"_index":206,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["canactivate",{"_index":221,"title":{},"body":{"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":226,"title":{},"body":{"guards/RolesGuard.html":{}}}],["cancel",{"_index":342,"title":{},"body":{"controllers/TicketController.html":{}}}],["cancelled",{"_index":512,"title":{},"body":{"classes/TicketRepository.html":{},"injectables/TicketService.html":{},"miscellaneous/enumerations.html":{}}}],["catch",{"_index":96,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/TicketService.html":{},"injectables/UserService.html":{}}}],["catch(exception",{"_index":97,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{}}}],["check",{"_index":894,"title":{},"body":{"miscellaneous/variables.html":{}}}],["checking",{"_index":242,"title":{},"body":{"guards/RolesGuard.html":{}}}],["class",{"_index":30,"title":{"classes/CustomException.html":{},"classes/ExceptionExceptionFilter.html":{},"classes/LoginDto.html":{},"classes/TicketDto.html":{},"classes/TicketRepository.html":{},"classes/UserDto.html":{},"classes/UserRepository.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CustomException.html":{},"classes/ExceptionExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"entities/TicketBooking.html":{},"controllers/TicketController.html":{},"classes/TicketDto.html":{},"modules/TicketModule.html":{},"classes/TicketRepository.html":{},"injectables/TicketService.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"interfaces/ValidationPipeOptions.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["classes",{"_index":68,"title":{},"body":{"classes/CustomException.html":{},"classes/ExceptionExceptionFilter.html":{},"classes/LoginDto.html":{},"classes/TicketDto.html":{},"classes/TicketRepository.html":{},"classes/UserDto.html":{},"classes/UserRepository.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_ticketmodule",{"_index":479,"title":{},"body":{"modules/TicketModule.html":{},"overview.html":{}}}],["cluster_ticketmodule_providers",{"_index":480,"title":{},"body":{"modules/TicketModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":665,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":666,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":667,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["colling",{"_index":170,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["colume",{"_index":193,"title":{},"body":{"classes/LoginDto.html":{},"entities/TicketBooking.html":{},"classes/TicketDto.html":{},"entities/User.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{}}}],["column",{"_index":264,"title":{},"body":{"entities/TicketBooking.html":{},"entities/User.html":{}}}],["column({type",{"_index":279,"title":{},"body":{"entities/TicketBooking.html":{},"entities/User.html":{}}}],["column({unique",{"_index":291,"title":{},"body":{"entities/TicketBooking.html":{},"entities/User.html":{}}}],["compodoc/compodoc",{"_index":779,"title":{},"body":{"dependencies.html":{}}}],["console.log(\"=========ticket",{"_index":536,"title":{},"body":{"injectables/TicketService.html":{}}}],["console.log(\"=========user",{"_index":533,"title":{},"body":{"injectables/TicketService.html":{}}}],["console.log(\"hashedpassword",{"_index":715,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(\"response",{"_index":719,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log('payload",{"_index":168,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["console.log(response",{"_index":744,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(token",{"_index":733,"title":{},"body":{"injectables/UserService.html":{}}}],["const",{"_index":238,"title":{},"body":{"guards/RolesGuard.html":{},"injectables/TicketService.html":{},"injectables/UserService.html":{}}}],["constructor",{"_index":76,"title":{},"body":{"classes/CustomException.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"injectables/TicketService.html":{},"injectables/UserService.html":{}}}],["constructor(message",{"_index":77,"title":{},"body":{"classes/CustomException.html":{}}}],["constructor(private",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TicketController.html":{},"injectables/TicketService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["constructor(reflectore",{"_index":222,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(ticketrepo",{"_index":516,"title":{},"body":{"injectables/TicketService.html":{}}}],["constructor(userrepo",{"_index":147,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["contact",{"_index":573,"title":{},"body":{"entities/User.html":{},"classes/UserDto.html":{}}}],["context",{"_index":212,"title":{},"body":{"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TransformInterceptor.html":{}}}],["context.getclass",{"_index":241,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":240,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":244,"title":{},"body":{"guards/RolesGuard.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/TicketController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/TicketController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('ticket",{"_index":384,"title":{},"body":{"controllers/TicketController.html":{}}}],["controller('user",{"_index":626,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/TicketController.html":{},"modules/TicketModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["controllers:[ticketcontroller",{"_index":490,"title":{},"body":{"modules/TicketModule.html":{}}}],["coverage",{"_index":761,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":202,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["createquerybuilder",{"_index":509,"title":{},"body":{"classes/TicketRepository.html":{}}}],["creating",{"_index":662,"title":{},"body":{"classes/UserDto.html":{}}}],["creation",{"_index":79,"title":{},"body":{"classes/CustomException.html":{},"classes/TicketDto.html":{}}}],["credential",{"_index":736,"title":{},"body":{"injectables/UserService.html":{}}}],["crude",{"_index":494,"title":{},"body":{"classes/TicketRepository.html":{},"classes/UserRepository.html":{}}}],["ctx",{"_index":108,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{}}}],["ctx.getrequest",{"_index":111,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":113,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{}}}],["custom",{"_index":72,"title":{},"body":{"classes/CustomException.html":{}}}],["customexception",{"_index":67,"title":{"classes/CustomException.html":{}},"body":{"classes/CustomException.html":{},"coverage.html":{}}}],["data",{"_index":107,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["database",{"_index":253,"title":{},"body":{"entities/TicketBooking.html":{}}}],["databse",{"_index":564,"title":{},"body":{"entities/User.html":{}}}],["date",{"_index":298,"title":{},"body":{"entities/TicketBooking.html":{},"classes/TicketDto.html":{}}}],["date().toisostring",{"_index":126,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{}}}],["decorators",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"classes/LoginDto.html":{},"entities/TicketBooking.html":{},"controllers/TicketController.html":{},"classes/TicketDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{}}}],["default",{"_index":281,"title":{},"body":{"entities/TicketBooking.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":677,"title":{},"body":{"modules/UserModule.html":{}}}],["define",{"_index":575,"title":{},"body":{"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["defined",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/CustomException.html":{},"classes/ExceptionExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"guards/RolesGuard.html":{},"entities/TicketBooking.html":{},"controllers/TicketController.html":{},"classes/TicketDto.html":{},"classes/TicketRepository.html":{},"injectables/TicketService.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":361,"title":{},"body":{"controllers/TicketController.html":{},"controllers/UserController.html":{}}}],["delete('/tickectcancel/:id",{"_index":409,"title":{},"body":{"controllers/TicketController.html":{}}}],["delete('/userdeletebyid/:id",{"_index":600,"title":{},"body":{"controllers/UserController.html":{}}}],["deleted",{"_index":748,"title":{},"body":{"injectables/UserService.html":{}}}],["dependencies",{"_index":42,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/TicketModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CustomException.html":{},"classes/ExceptionExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"entities/TicketBooking.html":{},"controllers/TicketController.html":{},"classes/TicketDto.html":{},"modules/TicketModule.html":{},"classes/TicketRepository.html":{},"injectables/TicketService.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"interfaces/ValidationPipeOptions.html":{},"index.html":{}}}],["details",{"_index":551,"title":{},"body":{"injectables/TicketService.html":{}}}],["development",{"_index":847,"title":{},"body":{"index.html":{}}}],["didgit",{"_index":656,"title":{},"body":{"classes/UserDto.html":{}}}],["digit",{"_index":428,"title":{},"body":{"classes/TicketDto.html":{},"classes/UserDto.html":{}}}],["digit'})@maxlength(3",{"_index":425,"title":{},"body":{"classes/TicketDto.html":{}}}],["disable",{"_index":755,"title":{},"body":{"interfaces/ValidationPipeOptions.html":{}}}],["disableerrormessages",{"_index":752,"title":{},"body":{"interfaces/ValidationPipeOptions.html":{}}}],["documentation",{"_index":762,"title":{},"body":{"coverage.html":{}}}],["dto",{"_index":182,"title":{},"body":{"classes/LoginDto.html":{},"classes/UserDto.html":{}}}],["dto/ticketbooking.dto",{"_index":379,"title":{},"body":{"controllers/TicketController.html":{},"injectables/TicketService.html":{}}}],["dto/user.dto",{"_index":621,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["e2e",{"_index":858,"title":{},"body":{"index.html":{}}}],["eamil",{"_index":645,"title":{},"body":{"classes/UserDto.html":{}}}],["efficient",{"_index":836,"title":{},"body":{"index.html":{}}}],["email",{"_index":192,"title":{},"body":{"classes/LoginDto.html":{},"entities/User.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{}}}],["emailid",{"_index":141,"title":{},"body":{"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"entities/User.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{}}}],["empty",{"_index":469,"title":{},"body":{"classes/TicketDto.html":{},"classes/UserDto.html":{}}}],["empty'})@isdate({message",{"_index":458,"title":{},"body":{"classes/TicketDto.html":{}}}],["empty'})@isnumber",{"_index":430,"title":{},"body":{"classes/TicketDto.html":{}}}],["empty'})@isnumber()@minlength(1",{"_index":422,"title":{},"body":{"classes/TicketDto.html":{},"classes/UserDto.html":{}}}],["empty'})@isnumber()@minlength(10",{"_index":653,"title":{},"body":{"classes/UserDto.html":{}}}],["empty'})@isstring({message",{"_index":432,"title":{},"body":{"classes/TicketDto.html":{},"classes/UserDto.html":{}}}],["empty'})@minlength(3",{"_index":646,"title":{},"body":{"classes/UserDto.html":{}}}],["enable/disable",{"_index":757,"title":{},"body":{"interfaces/ValidationPipeOptions.html":{}}}],["end",{"_index":455,"title":{},"body":{"classes/TicketDto.html":{}}}],["ending",{"_index":294,"title":{},"body":{"entities/TicketBooking.html":{},"classes/TicketDto.html":{}}}],["enter",{"_index":187,"title":{},"body":{"classes/LoginDto.html":{}}}],["entities",{"_index":250,"title":{},"body":{"entities/TicketBooking.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":248,"title":{"entities/TicketBooking.html":{},"entities/User.html":{}},"body":{"entities/TicketBooking.html":{},"entities/User.html":{},"coverage.html":{}}}],["entityrepository",{"_index":502,"title":{},"body":{"classes/TicketRepository.html":{},"classes/UserRepository.html":{}}}],["entityrepository(ticketbooking",{"_index":503,"title":{},"body":{"classes/TicketRepository.html":{}}}],["entityrepository(user",{"_index":692,"title":{},"body":{"classes/UserRepository.html":{}}}],["enum",{"_index":280,"title":{},"body":{"entities/TicketBooking.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["enume",{"_index":446,"title":{},"body":{"classes/TicketDto.html":{}}}],["enumerations",{"_index":816,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":175,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/TicketService.html":{},"injectables/UserService.html":{}}}],["error.errno",{"_index":540,"title":{},"body":{"injectables/TicketService.html":{},"injectables/UserService.html":{}}}],["error?.status",{"_index":739,"title":{},"body":{"injectables/UserService.html":{}}}],["errors",{"_index":760,"title":{},"body":{"interfaces/ValidationPipeOptions.html":{}}}],["exception",{"_index":73,"title":{},"body":{"classes/CustomException.html":{},"classes/ExceptionExceptionFilter.html":{},"controllers/UserController.html":{}}}],["exception.exception.ts",{"_index":71,"title":{},"body":{"classes/CustomException.html":{},"coverage.html":{}}}],["exception.exception.ts:7",{"_index":78,"title":{},"body":{"classes/CustomException.html":{}}}],["exception.getstatus",{"_index":116,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{}}}],["exception.message",{"_index":121,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{}}}],["exception/custom",{"_index":70,"title":{},"body":{"classes/CustomException.html":{},"coverage.html":{}}}],["exceptionexceptionfilter",{"_index":90,"title":{"classes/ExceptionExceptionFilter.html":{}},"body":{"classes/ExceptionExceptionFilter.html":{},"coverage.html":{}}}],["exceptionfactory",{"_index":753,"title":{},"body":{"interfaces/ValidationPipeOptions.html":{}}}],["exceptionfilter",{"_index":95,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{}}}],["execute",{"_index":514,"title":{},"body":{"classes/TicketRepository.html":{}}}],["executioncontext",{"_index":205,"title":{},"body":{"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TransformInterceptor.html":{}}}],["expiresin",{"_index":682,"title":{},"body":{"modules/UserModule.html":{}}}],["export",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CustomException.html":{},"classes/ExceptionExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"entities/TicketBooking.html":{},"controllers/TicketController.html":{},"classes/TicketDto.html":{},"modules/TicketModule.html":{},"classes/TicketRepository.html":{},"injectables/TicketService.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"interfaces/ValidationPipeOptions.html":{}}}],["exports",{"_index":488,"title":{},"body":{"modules/TicketModule.html":{},"modules/UserModule.html":{}}}],["exports:[typeormmodule,jwtstrategy,passportmodule",{"_index":686,"title":{},"body":{"modules/UserModule.html":{}}}],["express",{"_index":104,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{},"dependencies.html":{}}}],["extends",{"_index":74,"title":{},"body":{"classes/CustomException.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/TicketRepository.html":{},"classes/UserRepository.html":{},"interfaces/ValidationPipeOptions.html":{}}}],["extractjwt",{"_index":158,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":167,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["failur",{"_index":520,"title":{},"body":{"injectables/TicketService.html":{}}}],["failure",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/ExceptionExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"controllers/TicketController.html":{},"classes/TicketRepository.html":{},"injectables/TicketService.html":{},"injectables/TransformInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["fare",{"_index":256,"title":{},"body":{"entities/TicketBooking.html":{},"classes/TicketDto.html":{}}}],["fastify",{"_index":795,"title":{},"body":{"dependencies.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CustomException.html":{},"classes/ExceptionExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"entities/TicketBooking.html":{},"controllers/TicketController.html":{},"classes/TicketDto.html":{},"modules/TicketModule.html":{},"classes/TicketRepository.html":{},"injectables/TicketService.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"interfaces/ValidationPipeOptions.html":{},"coverage.html":{}}}],["filter.filter.ts",{"_index":93,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{},"coverage.html":{}}}],["filter.filter.ts:15",{"_index":100,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{}}}],["filter/exception",{"_index":92,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{},"coverage.html":{}}}],["find",{"_index":338,"title":{},"body":{"controllers/TicketController.html":{},"injectables/TicketService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findbookingticketbyid",{"_index":314,"title":{},"body":{"controllers/TicketController.html":{},"injectables/TicketService.html":{}}}],["findbookingticketbyid(@param('id",{"_index":397,"title":{},"body":{"controllers/TicketController.html":{}}}],["findbookingticketbyid(id",{"_index":320,"title":{},"body":{"controllers/TicketController.html":{},"injectables/TicketService.html":{}}}],["finding",{"_index":334,"title":{},"body":{"controllers/TicketController.html":{},"injectables/UserService.html":{}}}],["findticketbookedbyname",{"_index":315,"title":{},"body":{"controllers/TicketController.html":{},"injectables/TicketService.html":{}}}],["findticketbookedbyname(@param('name",{"_index":400,"title":{},"body":{"controllers/TicketController.html":{}}}],["findticketbookedbyname(name",{"_index":330,"title":{},"body":{"controllers/TicketController.html":{},"injectables/TicketService.html":{}}}],["finduserbyname",{"_index":584,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["finduserbyname(@param('name",{"_index":636,"title":{},"body":{"controllers/UserController.html":{}}}],["finduserbyname(name",{"_index":591,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["finduserbyquerybuilder",{"_index":496,"title":{},"body":{"classes/TicketRepository.html":{}}}],["finduserbyquerybuilder(id",{"_index":498,"title":{},"body":{"classes/TicketRepository.html":{}}}],["finduserlist",{"_index":585,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["finduserlist(user",{"_index":594,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["finduserticketbyid",{"_index":316,"title":{},"body":{"controllers/TicketController.html":{},"injectables/TicketService.html":{}}}],["finduserticketbyid(@param('id",{"_index":413,"title":{},"body":{"controllers/TicketController.html":{}}}],["finduserticketbyid(id",{"_index":333,"title":{},"body":{"controllers/TicketController.html":{},"injectables/TicketService.html":{}}}],["five",{"_index":434,"title":{},"body":{"classes/TicketDto.html":{},"classes/UserDto.html":{}}}],["forbiddenexception",{"_index":705,"title":{},"body":{"injectables/UserService.html":{}}}],["forbiddenexception(error.message",{"_index":741,"title":{},"body":{"injectables/UserService.html":{}}}],["forbiddenexception(message",{"_index":737,"title":{},"body":{"injectables/UserService.html":{}}}],["found",{"_index":323,"title":{},"body":{"controllers/TicketController.html":{},"injectables/TicketService.html":{},"injectables/UserService.html":{}}}],["framework",{"_index":834,"title":{},"body":{"index.html":{}}}],["function",{"_index":169,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/ValidationPipeOptions.html":{},"coverage.html":{}}}],["functions",{"_index":827,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["gender",{"_index":257,"title":{},"body":{"entities/TicketBooking.html":{},"classes/TicketDto.html":{},"entities/User.html":{},"classes/UserDto.html":{}}}],["generating",{"_index":284,"title":{},"body":{"entities/TicketBooking.html":{}}}],["genereting",{"_index":275,"title":{},"body":{"entities/TicketBooking.html":{}}}],["get('/findbookingticketbyid/:id",{"_index":396,"title":{},"body":{"controllers/TicketController.html":{}}}],["get('/findticketbookedbyname/:name",{"_index":399,"title":{},"body":{"controllers/TicketController.html":{}}}],["get('/finduserbyname/:name",{"_index":592,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/finduserlist",{"_index":596,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/finduserticketbyid/:id",{"_index":412,"title":{},"body":{"controllers/TicketController.html":{}}}],["get('/ticketbookinglist",{"_index":394,"title":{},"body":{"controllers/TicketController.html":{}}}],["get('/userfindbyid/:id",{"_index":603,"title":{},"body":{"controllers/UserController.html":{}}}],["gethello",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getrequest",{"_index":110,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{}}}],["getresponse",{"_index":112,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{}}}],["getstatus",{"_index":114,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{}}}],["getting",{"_index":830,"title":{"index.html":{}},"body":{}}],["grow",{"_index":865,"title":{},"body":{"index.html":{}}}],["guard",{"_index":218,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":131,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["gurads",{"_index":895,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hashedpassword",{"_index":713,"title":{},"body":{"injectables/UserService.html":{}}}],["hello",{"_index":65,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":117,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{},"entities/TicketBooking.html":{},"controllers/TicketController.html":{},"injectables/TicketService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["host",{"_index":98,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{}}}],["host.switchtohttp",{"_index":109,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{}}}],["hotel",{"_index":86,"title":{},"body":{"classes/CustomException.html":{},"injectables/JwtStrategy.html":{},"modules/UserModule.html":{}}}],["httpcode",{"_index":528,"title":{},"body":{"injectables/TicketService.html":{}}}],["httpexception",{"_index":75,"title":{},"body":{"classes/CustomException.html":{},"injectables/JwtStrategy.html":{},"injectables/TicketService.html":{},"injectables/UserService.html":{}}}],["httpexception(error.message",{"_index":177,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["httpexception(error.messsage",{"_index":746,"title":{},"body":{"injectables/UserService.html":{}}}],["https://nestjs.com",{"_index":880,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":85,"title":{},"body":{"classes/CustomException.html":{},"injectables/JwtStrategy.html":{},"controllers/TicketController.html":{},"injectables/TicketService.html":{},"injectables/UserService.html":{}}}],["httpstatus.created",{"_index":388,"title":{},"body":{"controllers/TicketController.html":{}}}],["httpstatus.internal_server_error",{"_index":389,"title":{},"body":{"controllers/TicketController.html":{},"injectables/UserService.html":{}}}],["httpstatus.not_found",{"_index":89,"title":{},"body":{"classes/CustomException.html":{},"controllers/TicketController.html":{}}}],["httpstatus.ok",{"_index":393,"title":{},"body":{"controllers/TicketController.html":{}}}],["httpstatus.unauthorized",{"_index":178,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["hussain",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"classes/ExceptionExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"classes/LoginDto.html":{},"interfaces/Response.html":{},"entities/TicketBooking.html":{},"controllers/TicketController.html":{},"classes/TicketDto.html":{},"modules/TicketModule.html":{},"classes/TicketRepository.html":{},"injectables/TicketService.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"interfaces/ValidationPipeOptions.html":{}}}],["id",{"_index":185,"title":{},"body":{"classes/LoginDto.html":{},"entities/TicketBooking.html":{},"controllers/TicketController.html":{},"classes/TicketDto.html":{},"classes/TicketRepository.html":{},"injectables/TicketService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{}}}],["id,name",{"_index":505,"title":{},"body":{"classes/TicketRepository.html":{}}}],["id=?',[id",{"_index":508,"title":{},"body":{"classes/TicketRepository.html":{}}}],["identifier",{"_index":763,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":94,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TransformInterceptor.html":{}}}],["import",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CustomException.html":{},"classes/ExceptionExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"entities/TicketBooking.html":{},"controllers/TicketController.html":{},"classes/TicketDto.html":{},"modules/TicketModule.html":{},"classes/TicketRepository.html":{},"injectables/TicketService.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"interfaces/ValidationPipeOptions.html":{}}}],["imports",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{}}}],["imports:[typeormmodule.forfeature([ticketbooking,ticketrepository,user,userrepository",{"_index":487,"title":{},"body":{"modules/TicketModule.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/ExceptionExceptionFilter.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"entities/TicketBooking.html":{},"controllers/TicketController.html":{},"classes/TicketDto.html":{},"classes/TicketRepository.html":{},"injectables/TicketService.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{},"interfaces/ValidationPipeOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CustomException.html":{},"classes/ExceptionExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"entities/TicketBooking.html":{},"controllers/TicketController.html":{},"classes/TicketDto.html":{},"modules/TicketModule.html":{},"classes/TicketRepository.html":{},"injectables/TicketService.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"interfaces/ValidationPipeOptions.html":{}}}],["information",{"_index":699,"title":{},"body":{"injectables/UserService.html":{}}}],["inject",{"_index":696,"title":{},"body":{"injectables/UserService.html":{}}}],["injectable",{"_index":60,"title":{"injectables/AppService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/TicketService.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TicketService.html":{},"injectables/TransformInterceptor.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":61,"title":{},"body":{"injectables/AppService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/TicketService.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["installation",{"_index":844,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":846,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":561,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["intercept(context",{"_index":215,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["interceptor/transform.interceptor.ts",{"_index":200,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["interceptor/transform.interceptor.ts:25",{"_index":562,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["interface",{"_index":135,"title":{"interfaces/JwtPayload.html":{},"interfaces/Response.html":{},"interfaces/ValidationPipeOptions.html":{}},"body":{"interfaces/JwtPayload.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"interfaces/ValidationPipeOptions.html":{},"coverage.html":{}}}],["interfaces",{"_index":137,"title":{},"body":{"interfaces/JwtPayload.html":{},"interfaces/Response.html":{},"interfaces/ValidationPipeOptions.html":{},"overview.html":{}}}],["internalservererrorexception",{"_index":529,"title":{},"body":{"injectables/TicketService.html":{},"injectables/UserService.html":{}}}],["internalservererrorexception(error.message",{"_index":546,"title":{},"body":{"injectables/TicketService.html":{},"injectables/UserService.html":{}}}],["internalservererrorexception(message",{"_index":539,"title":{},"body":{"injectables/TicketService.html":{},"injectables/UserService.html":{}}}],["invalid",{"_index":735,"title":{},"body":{"injectables/UserService.html":{}}}],["isdate",{"_index":464,"title":{},"body":{"classes/TicketDto.html":{}}}],["isemail",{"_index":195,"title":{},"body":{"classes/LoginDto.html":{}}}],["isnotempty",{"_index":196,"title":{},"body":{"classes/LoginDto.html":{},"classes/TicketDto.html":{},"entities/User.html":{},"classes/UserDto.html":{}}}],["isnotempty({message",{"_index":184,"title":{},"body":{"classes/LoginDto.html":{},"classes/UserDto.html":{}}}],["isnumber",{"_index":465,"title":{},"body":{"classes/TicketDto.html":{},"entities/User.html":{},"classes/UserDto.html":{}}}],["isstring",{"_index":466,"title":{},"body":{"classes/TicketDto.html":{},"entities/User.html":{},"classes/UserDto.html":{}}}],["join",{"_index":872,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":130,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["jwt/jwt",{"_index":709,"title":{},"body":{"injectables/UserService.html":{}}}],["jwt/jwt.strategy",{"_index":673,"title":{},"body":{"modules/UserModule.html":{}}}],["jwtauthguard",{"_index":127,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"controllers/TicketController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":166,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":669,"title":{},"body":{"modules/UserModule.html":{}}}],["jwtmodule.register",{"_index":678,"title":{},"body":{"modules/UserModule.html":{}}}],["jwtpayload",{"_index":136,"title":{"interfaces/JwtPayload.html":{}},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["jwtservice",{"_index":694,"title":{},"body":{"injectables/UserService.html":{}}}],["jwtservice:jwtservice",{"_index":710,"title":{},"body":{"injectables/UserService.html":{}}}],["jwtstrategy",{"_index":143,"title":{"injectables/JwtStrategy.html":{}},"body":{"injectables/JwtStrategy.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["jwtstrategy,passportmodule",{"_index":687,"title":{},"body":{"modules/UserModule.html":{}}}],["kamil",{"_index":877,"title":{},"body":{"index.html":{}}}],["key",{"_index":277,"title":{},"body":{"entities/TicketBooking.html":{}}}],["later",{"_index":723,"title":{},"body":{"injectables/UserService.html":{}}}],["leter",{"_index":471,"title":{},"body":{"classes/TicketDto.html":{},"classes/UserDto.html":{}}}],["leter'})@maxlength(100",{"_index":435,"title":{},"body":{"classes/TicketDto.html":{},"classes/UserDto.html":{}}}],["leter'})@maxlength(6",{"_index":441,"title":{},"body":{"classes/TicketDto.html":{},"classes/UserDto.html":{}}}],["leters",{"_index":437,"title":{},"body":{"classes/TicketDto.html":{},"classes/UserDto.html":{}}}],["letter",{"_index":477,"title":{},"body":{"classes/TicketDto.html":{}}}],["letter'})@minlength(2",{"_index":433,"title":{},"body":{"classes/TicketDto.html":{}}}],["level",{"_index":608,"title":{},"body":{"controllers/UserController.html":{}}}],["license",{"_index":883,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":862,"title":{},"body":{"index.html":{}}}],["list",{"_index":353,"title":{},"body":{"controllers/TicketController.html":{},"controllers/UserController.html":{}}}],["local",{"_index":804,"title":{},"body":{"dependencies.html":{}}}],["logic",{"_index":387,"title":{},"body":{"controllers/TicketController.html":{},"injectables/TicketService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["login",{"_index":181,"title":{},"body":{"classes/LoginDto.html":{}}}],["login.dto",{"_index":622,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["logindto",{"_index":179,"title":{"classes/LoginDto.html":{}},"body":{"classes/LoginDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["logindto):promise",{"_index":630,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["main",{"_index":829,"title":{},"body":{"miscellaneous/functions.html":{}}}],["managements",{"_index":87,"title":{},"body":{"classes/CustomException.html":{},"injectables/JwtStrategy.html":{},"modules/UserModule.html":{}}}],["manager",{"_index":790,"title":{},"body":{"dependencies.html":{}}}],["manytoone",{"_index":303,"title":{},"body":{"entities/TicketBooking.html":{}}}],["manytoone(undefined",{"_index":299,"title":{},"body":{"entities/TicketBooking.html":{}}}],["map",{"_index":209,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["maping",{"_index":216,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["mapping",{"_index":252,"title":{},"body":{"entities/TicketBooking.html":{},"entities/User.html":{}}}],["matching",{"_index":38,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CustomException.html":{},"classes/ExceptionExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"entities/TicketBooking.html":{},"controllers/TicketController.html":{},"classes/TicketDto.html":{},"modules/TicketModule.html":{},"classes/TicketRepository.html":{},"injectables/TicketService.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"interfaces/ValidationPipeOptions.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["maximum",{"_index":426,"title":{},"body":{"classes/TicketDto.html":{},"classes/UserDto.html":{}}}],["maxlength",{"_index":467,"title":{},"body":{"classes/TicketDto.html":{},"entities/User.html":{},"classes/UserDto.html":{}}}],["maxlength(100",{"_index":472,"title":{},"body":{"classes/TicketDto.html":{},"classes/UserDto.html":{}}}],["maxlength(3",{"_index":474,"title":{},"body":{"classes/TicketDto.html":{},"classes/UserDto.html":{}}}],["maxlength(6",{"_index":476,"title":{},"body":{"classes/TicketDto.html":{},"classes/UserDto.html":{}}}],["md",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"classes/ExceptionExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"classes/LoginDto.html":{},"interfaces/Response.html":{},"entities/TicketBooking.html":{},"controllers/TicketController.html":{},"classes/TicketDto.html":{},"modules/TicketModule.html":{},"classes/TicketRepository.html":{},"injectables/TicketService.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"interfaces/ValidationPipeOptions.html":{}}}],["meal",{"_index":278,"title":{},"body":{"entities/TicketBooking.html":{},"classes/TicketDto.html":{},"miscellaneous/enumerations.html":{}}}],["meal.yes",{"_index":308,"title":{},"body":{"entities/TicketBooking.html":{}}}],["meal_preference",{"_index":258,"title":{},"body":{"entities/TicketBooking.html":{},"classes/TicketDto.html":{}}}],["meals",{"_index":821,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["meals/meals",{"_index":305,"title":{},"body":{"entities/TicketBooking.html":{},"classes/TicketDto.html":{}}}],["messaage",{"_index":198,"title":{},"body":{"classes/LoginDto.html":{}}}],["message",{"_index":83,"title":{},"body":{"classes/CustomException.html":{},"classes/ExceptionExceptionFilter.html":{},"classes/LoginDto.html":{},"classes/TicketDto.html":{},"injectables/TicketService.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{},"interfaces/ValidationPipeOptions.html":{}}}],["metadata",{"_index":807,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":607,"title":{},"body":{"controllers/UserController.html":{}}}],["methods",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/ExceptionExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TicketController.html":{},"classes/TicketRepository.html":{},"injectables/TicketService.html":{},"injectables/TransformInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["minimum",{"_index":423,"title":{},"body":{"classes/TicketDto.html":{},"classes/UserDto.html":{}}}],["minlength",{"_index":468,"title":{},"body":{"classes/TicketDto.html":{},"entities/User.html":{},"classes/UserDto.html":{}}}],["minlength(1",{"_index":473,"title":{},"body":{"classes/TicketDto.html":{},"classes/UserDto.html":{}}}],["minlength(10",{"_index":663,"title":{},"body":{"classes/UserDto.html":{}}}],["minlength(2",{"_index":478,"title":{},"body":{"classes/TicketDto.html":{}}}],["minlength(3",{"_index":470,"title":{},"body":{"classes/TicketDto.html":{},"classes/UserDto.html":{}}}],["minlength(5",{"_index":475,"title":{},"body":{"classes/TicketDto.html":{},"classes/UserDto.html":{}}}],["miscellaneous",{"_index":815,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":861,"title":{},"body":{"index.html":{}}}],["mode",{"_index":851,"title":{},"body":{"index.html":{}}}],["module",{"_index":39,"title":{"modules/AppModule.html":{},"modules/TicketModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TicketModule.html":{},"modules/UserModule.html":{}}}],["modules",{"_index":41,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/TicketModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":874,"title":{},"body":{"index.html":{}}}],["mysql",{"_index":798,"title":{},"body":{"dependencies.html":{}}}],["mysql2",{"_index":800,"title":{},"body":{"dependencies.html":{}}}],["myśliwiec",{"_index":878,"title":{},"body":{"index.html":{}}}],["name",{"_index":81,"title":{},"body":{"classes/CustomException.html":{},"classes/ExceptionExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"guards/RolesGuard.html":{},"entities/TicketBooking.html":{},"controllers/TicketController.html":{},"classes/TicketDto.html":{},"classes/TicketRepository.html":{},"injectables/TicketService.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{}}}],["name(foreignkey",{"_index":307,"title":{},"body":{"entities/TicketBooking.html":{}}}],["nasir",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"classes/ExceptionExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"classes/LoginDto.html":{},"interfaces/Response.html":{},"entities/TicketBooking.html":{},"controllers/TicketController.html":{},"classes/TicketDto.html":{},"modules/TicketModule.html":{},"classes/TicketRepository.html":{},"injectables/TicketService.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"interfaces/ValidationPipeOptions.html":{}}}],["nest",{"_index":841,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":882,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":204,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["nestjs/common",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CustomException.html":{},"classes/ExceptionExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"controllers/TicketController.html":{},"modules/TicketModule.html":{},"injectables/TicketService.html":{},"injectables/TransformInterceptor.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":231,"title":{},"body":{"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":670,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":133,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":783,"title":{},"body":{"dependencies.html":{}}}],["nestjs/schedule",{"_index":784,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":374,"title":{},"body":{"controllers/TicketController.html":{},"classes/TicketDto.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/TicketModule.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["new",{"_index":125,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/TicketService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["next",{"_index":213,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["next.handle().pipe(map(data",{"_index":217,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["node.js",{"_index":833,"title":{},"body":{"index.html":{}}}],["npm",{"_index":845,"title":{},"body":{"index.html":{}}}],["number",{"_index":263,"title":{},"body":{"entities/TicketBooking.html":{},"controllers/TicketController.html":{},"classes/TicketDto.html":{},"classes/TicketRepository.html":{},"injectables/TicketService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{}}}],["number'})@maxlength(100",{"_index":651,"title":{},"body":{"classes/UserDto.html":{}}}],["numbers",{"_index":657,"title":{},"body":{"classes/UserDto.html":{}}}],["numbers'})@maxlength(100",{"_index":655,"title":{},"body":{"classes/UserDto.html":{}}}],["obj",{"_index":598,"title":{},"body":{"controllers/UserController.html":{}}}],["object",{"_index":203,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["observable",{"_index":207,"title":{},"body":{"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TransformInterceptor.html":{}}}],["one",{"_index":424,"title":{},"body":{"classes/TicketDto.html":{},"classes/UserDto.html":{}}}],["onetomany",{"_index":580,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":576,"title":{},"body":{"entities/User.html":{}}}],["open",{"_index":863,"title":{},"body":{"index.html":{}}}],["opration",{"_index":495,"title":{},"body":{"classes/TicketRepository.html":{}}}],["opretion",{"_index":691,"title":{},"body":{"classes/UserRepository.html":{}}}],["optional",{"_index":82,"title":{},"body":{"classes/CustomException.html":{},"classes/ExceptionExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TicketController.html":{},"classes/TicketRepository.html":{},"injectables/TicketService.html":{},"injectables/TransformInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"interfaces/ValidationPipeOptions.html":{}}}],["out",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/TicketModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":887,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["paasing",{"_index":522,"title":{},"body":{"injectables/TicketService.html":{}}}],["package",{"_index":778,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"classes/CustomException.html":{},"classes/ExceptionExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"controllers/TicketController.html":{},"classes/TicketRepository.html":{},"injectables/TicketService.html":{},"injectables/TransformInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["parameters",{"_index":80,"title":{},"body":{"classes/CustomException.html":{},"classes/ExceptionExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TicketController.html":{},"classes/TicketRepository.html":{},"injectables/TicketService.html":{},"injectables/TransformInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["parseintpipe",{"_index":362,"title":{},"body":{"controllers/TicketController.html":{},"controllers/UserController.html":{}}}],["particular",{"_index":605,"title":{},"body":{"controllers/UserController.html":{}}}],["pass",{"_index":725,"title":{},"body":{"injectables/UserService.html":{}}}],["passanger",{"_index":450,"title":{},"body":{"classes/TicketDto.html":{}}}],["passing",{"_index":329,"title":{},"body":{"controllers/TicketController.html":{},"injectables/TicketService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["passport",{"_index":160,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":671,"title":{},"body":{"modules/UserModule.html":{}}}],["passportmodule.register",{"_index":676,"title":{},"body":{"modules/UserModule.html":{}}}],["passportstrategy",{"_index":157,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":163,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":183,"title":{},"body":{"classes/LoginDto.html":{},"entities/User.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{}}}],["patch",{"_index":363,"title":{},"body":{"controllers/TicketController.html":{}}}],["patch('/ticketcancelled/:id",{"_index":417,"title":{},"body":{"controllers/TicketController.html":{}}}],["path",{"_index":84,"title":{},"body":{"classes/CustomException.html":{},"classes/ExceptionExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"controllers/TicketController.html":{},"classes/TicketRepository.html":{},"injectables/TicketService.html":{},"injectables/TransformInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["payload",{"_index":155,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["payload.emailid",{"_index":174,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.interface",{"_index":162,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["payload.interface.ts",{"_index":139,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["performs",{"_index":493,"title":{},"body":{"classes/TicketRepository.html":{}}}],["phone",{"_index":565,"title":{},"body":{"entities/User.html":{},"classes/UserDto.html":{}}}],["place",{"_index":271,"title":{},"body":{"entities/TicketBooking.html":{},"classes/TicketDto.html":{}}}],["pleas",{"_index":552,"title":{},"body":{"injectables/TicketService.html":{}}}],["please",{"_index":543,"title":{},"body":{"injectables/TicketService.html":{},"index.html":{}}}],["post",{"_index":364,"title":{},"body":{"controllers/TicketController.html":{},"controllers/UserController.html":{}}}],["post('/register",{"_index":614,"title":{},"body":{"controllers/UserController.html":{}}}],["post('/ticketbooking",{"_index":390,"title":{},"body":{"controllers/TicketController.html":{}}}],["post('/userlogin",{"_index":610,"title":{},"body":{"controllers/UserController.html":{}}}],["prefix",{"_index":313,"title":{},"body":{"controllers/TicketController.html":{},"controllers/UserController.html":{}}}],["primary",{"_index":276,"title":{},"body":{"entities/TicketBooking.html":{}}}],["primarygeneratedcolumn",{"_index":273,"title":{},"body":{"entities/TicketBooking.html":{},"entities/User.html":{}}}],["private",{"_index":530,"title":{},"body":{"injectables/TicketService.html":{},"injectables/UserService.html":{}}}],["production",{"_index":853,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":832,"title":{},"body":{"index.html":{}}}],["project",{"_index":864,"title":{},"body":{"index.html":{}}}],["promise",{"_index":230,"title":{},"body":{"guards/RolesGuard.html":{},"controllers/TicketController.html":{},"injectables/TicketService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["properties",{"_index":140,"title":{},"body":{"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"interfaces/Response.html":{},"entities/TicketBooking.html":{},"classes/TicketDto.html":{},"entities/User.html":{},"classes/UserDto.html":{},"interfaces/ValidationPipeOptions.html":{}}}],["providers",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/TicketModule.html":{},"modules/UserModule.html":{}}}],["providers:[ticketservice",{"_index":489,"title":{},"body":{"modules/TicketModule.html":{}}}],["put",{"_index":365,"title":{},"body":{"controllers/TicketController.html":{},"controllers/UserController.html":{}}}],["put('/updateticketbookingdetails/:id",{"_index":406,"title":{},"body":{"controllers/TicketController.html":{}}}],["put('/userupdatebyid/:id",{"_index":618,"title":{},"body":{"controllers/UserController.html":{}}}],["query",{"_index":339,"title":{},"body":{"controllers/TicketController.html":{}}}],["read",{"_index":873,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":34,"title":{},"body":{"controllers/AppController.html":{}}}],["recourd",{"_index":606,"title":{},"body":{"controllers/UserController.html":{}}}],["reflect",{"_index":806,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":223,"title":{},"body":{"guards/RolesGuard.html":{}}}],["reflectore",{"_index":225,"title":{},"body":{"guards/RolesGuard.html":{}}}],["reflectore:reflector",{"_index":236,"title":{},"body":{"guards/RolesGuard.html":{}}}],["registerd",{"_index":720,"title":{},"body":{"injectables/UserService.html":{}}}],["registered",{"_index":721,"title":{},"body":{"injectables/UserService.html":{}}}],["registering",{"_index":616,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["relation",{"_index":462,"title":{},"body":{"classes/TicketDto.html":{},"classes/UserDto.html":{}}}],["repo",{"_index":151,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["repo========\"+response",{"_index":537,"title":{},"body":{"injectables/TicketService.html":{}}}],["repo========\"+userresponse",{"_index":534,"title":{},"body":{"injectables/TicketService.html":{}}}],["repository",{"_index":492,"title":{},"body":{"classes/TicketRepository.html":{},"injectables/TicketService.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"index.html":{}}}],["request",{"_index":102,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{}}}],["request.url",{"_index":123,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{}}}],["required",{"_index":191,"title":{},"body":{"classes/LoginDto.html":{},"controllers/TicketController.html":{}}}],["required'})@isemail({messaage",{"_index":186,"title":{},"body":{"classes/LoginDto.html":{}}}],["requiredroles",{"_index":237,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles.some((role",{"_index":246,"title":{},"body":{"guards/RolesGuard.html":{}}}],["reset",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/TicketModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["response",{"_index":103,"title":{"interfaces/Response.html":{}},"body":{"classes/ExceptionExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"interfaces/Response.html":{},"injectables/TicketService.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["response,statuscode,message,url,time",{"_index":118,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{}}}],["response.affected",{"_index":555,"title":{},"body":{"injectables/TicketService.html":{},"injectables/UserService.html":{}}}],["response.status(status).json",{"_index":119,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{}}}],["responsible",{"_index":690,"title":{},"body":{"classes/UserRepository.html":{}}}],["results",{"_index":37,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CustomException.html":{},"classes/ExceptionExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"entities/TicketBooking.html":{},"controllers/TicketController.html":{},"classes/TicketDto.html":{},"modules/TicketModule.html":{},"classes/TicketRepository.html":{},"injectables/TicketService.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"interfaces/ValidationPipeOptions.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/ExceptionExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"controllers/TicketController.html":{},"classes/TicketRepository.html":{},"injectables/TicketService.html":{},"injectables/TransformInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["returns",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/ExceptionExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"controllers/TicketController.html":{},"classes/TicketRepository.html":{},"injectables/TicketService.html":{},"injectables/TransformInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["rimraf",{"_index":809,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":234,"title":{},"body":{"guards/RolesGuard.html":{},"controllers/TicketController.html":{},"entities/User.html":{},"classes/UserDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["role.user",{"_index":581,"title":{},"body":{"entities/User.html":{}}}],["role/roles.decorator",{"_index":233,"title":{},"body":{"guards/RolesGuard.html":{}}}],["roles",{"_index":245,"title":{},"body":{"guards/RolesGuard.html":{},"controllers/TicketController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles(role.admin",{"_index":415,"title":{},"body":{"controllers/TicketController.html":{},"controllers/UserController.html":{}}}],["roles/role",{"_index":235,"title":{},"body":{"guards/RolesGuard.html":{},"entities/User.html":{},"classes/UserDto.html":{}}}],["roles_key",{"_index":232,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolesguard",{"_index":219,"title":{"guards/RolesGuard.html":{}},"body":{"guards/RolesGuard.html":{},"controllers/TicketController.html":{},"coverage.html":{}}}],["rolse",{"_index":142,"title":{},"body":{"interfaces/JwtPayload.html":{},"guards/RolesGuard.html":{},"classes/UserDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["run",{"_index":848,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":208,"title":{},"body":{"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TransformInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":210,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["salt",{"_index":711,"title":{},"body":{"injectables/UserService.html":{}}}],["sataus",{"_index":259,"title":{},"body":{"entities/TicketBooking.html":{},"classes/TicketDto.html":{}}}],["scalable",{"_index":837,"title":{},"body":{"index.html":{}}}],["seat",{"_index":453,"title":{},"body":{"classes/TicketDto.html":{}}}],["seat_number",{"_index":260,"title":{},"body":{"entities/TicketBooking.html":{},"classes/TicketDto.html":{}}}],["secret",{"_index":679,"title":{},"body":{"modules/UserModule.html":{}}}],["secretorkey:'topsecret51",{"_index":165,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["select",{"_index":504,"title":{},"body":{"classes/TicketRepository.html":{}}}],["serive",{"_index":31,"title":{},"body":{"controllers/AppController.html":{}}}],["server",{"_index":838,"title":{},"body":{"index.html":{}}}],["service",{"_index":63,"title":{},"body":{"injectables/AppService.html":{},"injectables/UserService.html":{}}}],["set",{"_index":511,"title":{},"body":{"classes/TicketRepository.html":{}}}],["setmetadata(roles_key",{"_index":893,"title":{},"body":{"miscellaneous/variables.html":{}}}],["side",{"_index":839,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":681,"title":{},"body":{"modules/UserModule.html":{}}}],["simple",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CustomException.html":{},"classes/ExceptionExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"entities/TicketBooking.html":{},"controllers/TicketController.html":{},"classes/TicketDto.html":{},"modules/TicketModule.html":{},"classes/TicketRepository.html":{},"injectables/TicketService.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"interfaces/ValidationPipeOptions.html":{},"index.html":{}}}],["sponsors",{"_index":867,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":828,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../meals.ts",{"_index":817,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../role.ts",{"_index":818,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../roles.decorator.ts",{"_index":892,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../status.ts",{"_index":819,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:19",{"_index":15,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":62,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:11",{"_index":64,"title":{},"body":{"injectables/AppService.html":{}}}],["src/common/custom",{"_index":69,"title":{},"body":{"classes/CustomException.html":{},"coverage.html":{}}}],["src/common/exception",{"_index":91,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{},"coverage.html":{}}}],["src/common/transform",{"_index":199,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["src/common/validationpipe/validationpipeoptions.interface.ts",{"_index":750,"title":{},"body":{"interfaces/ValidationPipeOptions.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":767,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/ticketbooking/dto/ticketbooking.dto.ts",{"_index":420,"title":{},"body":{"classes/TicketDto.html":{},"coverage.html":{}}}],["src/ticketbooking/dto/ticketbooking.dto.ts:100",{"_index":461,"title":{},"body":{"classes/TicketDto.html":{}}}],["src/ticketbooking/dto/ticketbooking.dto.ts:14",{"_index":444,"title":{},"body":{"classes/TicketDto.html":{}}}],["src/ticketbooking/dto/ticketbooking.dto.ts:23",{"_index":449,"title":{},"body":{"classes/TicketDto.html":{}}}],["src/ticketbooking/dto/ticketbooking.dto.ts:32",{"_index":429,"title":{},"body":{"classes/TicketDto.html":{}}}],["src/ticketbooking/dto/ticketbooking.dto.ts:41",{"_index":443,"title":{},"body":{"classes/TicketDto.html":{}}}],["src/ticketbooking/dto/ticketbooking.dto.ts:50",{"_index":438,"title":{},"body":{"classes/TicketDto.html":{}}}],["src/ticketbooking/dto/ticketbooking.dto.ts:59",{"_index":456,"title":{},"body":{"classes/TicketDto.html":{}}}],["src/ticketbooking/dto/ticketbooking.dto.ts:66",{"_index":460,"title":{},"body":{"classes/TicketDto.html":{}}}],["src/ticketbooking/dto/ticketbooking.dto.ts:73",{"_index":459,"title":{},"body":{"classes/TicketDto.html":{}}}],["src/ticketbooking/dto/ticketbooking.dto.ts:80",{"_index":431,"title":{},"body":{"classes/TicketDto.html":{}}}],["src/ticketbooking/dto/ticketbooking.dto.ts:84",{"_index":445,"title":{},"body":{"classes/TicketDto.html":{}}}],["src/ticketbooking/dto/ticketbooking.dto.ts:91",{"_index":454,"title":{},"body":{"classes/TicketDto.html":{}}}],["src/ticketbooking/dto/ticketbooking.dto.ts:95",{"_index":451,"title":{},"body":{"classes/TicketDto.html":{}}}],["src/ticketbooking/meals/meals.ts",{"_index":820,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/ticketbooking/status/status.ts",{"_index":826,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/ticketbooking/ticketbooking.controller.ts",{"_index":312,"title":{},"body":{"controllers/TicketController.html":{},"coverage.html":{}}}],["src/ticketbooking/ticketbooking.controller.ts:114",{"_index":344,"title":{},"body":{"controllers/TicketController.html":{}}}],["src/ticketbooking/ticketbooking.controller.ts:131",{"_index":336,"title":{},"body":{"controllers/TicketController.html":{}}}],["src/ticketbooking/ticketbooking.controller.ts:151",{"_index":359,"title":{},"body":{"controllers/TicketController.html":{}}}],["src/ticketbooking/ticketbooking.controller.ts:31",{"_index":350,"title":{},"body":{"controllers/TicketController.html":{}}}],["src/ticketbooking/ticketbooking.controller.ts:43",{"_index":355,"title":{},"body":{"controllers/TicketController.html":{}}}],["src/ticketbooking/ticketbooking.controller.ts:60",{"_index":328,"title":{},"body":{"controllers/TicketController.html":{}}}],["src/ticketbooking/ticketbooking.controller.ts:77",{"_index":332,"title":{},"body":{"controllers/TicketController.html":{}}}],["src/ticketbooking/ticketbooking.entity",{"_index":579,"title":{},"body":{"entities/User.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{}}}],["src/ticketbooking/ticketbooking.entity.ts",{"_index":251,"title":{},"body":{"entities/TicketBooking.html":{},"coverage.html":{}}}],["src/ticketbooking/ticketbooking.entity.ts:15",{"_index":274,"title":{},"body":{"entities/TicketBooking.html":{}}}],["src/ticketbooking/ticketbooking.entity.ts:25",{"_index":286,"title":{},"body":{"entities/TicketBooking.html":{}}}],["src/ticketbooking/ticketbooking.entity.ts:30",{"_index":265,"title":{},"body":{"entities/TicketBooking.html":{}}}],["src/ticketbooking/ticketbooking.entity.ts:35",{"_index":272,"title":{},"body":{"entities/TicketBooking.html":{}}}],["src/ticketbooking/ticketbooking.entity.ts:40",{"_index":269,"title":{},"body":{"entities/TicketBooking.html":{}}}],["src/ticketbooking/ticketbooking.entity.ts:45",{"_index":293,"title":{},"body":{"entities/TicketBooking.html":{}}}],["src/ticketbooking/ticketbooking.entity.ts:50",{"_index":297,"title":{},"body":{"entities/TicketBooking.html":{}}}],["src/ticketbooking/ticketbooking.entity.ts:55",{"_index":296,"title":{},"body":{"entities/TicketBooking.html":{}}}],["src/ticketbooking/ticketbooking.entity.ts:60",{"_index":266,"title":{},"body":{"entities/TicketBooking.html":{}}}],["src/ticketbooking/ticketbooking.entity.ts:65",{"_index":283,"title":{},"body":{"entities/TicketBooking.html":{}}}],["src/ticketbooking/ticketbooking.entity.ts:70",{"_index":292,"title":{},"body":{"entities/TicketBooking.html":{}}}],["src/ticketbooking/ticketbooking.entity.ts:75",{"_index":289,"title":{},"body":{"entities/TicketBooking.html":{}}}],["src/ticketbooking/ticketbooking.entity.ts:79",{"_index":301,"title":{},"body":{"entities/TicketBooking.html":{}}}],["src/ticketbooking/ticketbooking.module.ts",{"_index":481,"title":{},"body":{"modules/TicketModule.html":{}}}],["src/ticketbooking/ticketbooking.repository",{"_index":672,"title":{},"body":{"modules/UserModule.html":{}}}],["src/ticketbooking/ticketbooking.repository.ts",{"_index":491,"title":{},"body":{"classes/TicketRepository.html":{},"coverage.html":{}}}],["src/ticketbooking/ticketbooking.repository.ts:15",{"_index":499,"title":{},"body":{"classes/TicketRepository.html":{}}}],["src/ticketbooking/ticketbooking.repository.ts:27",{"_index":501,"title":{},"body":{"classes/TicketRepository.html":{}}}],["src/ticketbooking/ticketbooking.service.ts",{"_index":515,"title":{},"body":{"injectables/TicketService.html":{},"coverage.html":{}}}],["src/ticketbooking/ticketbooking.service.ts:11",{"_index":517,"title":{},"body":{"injectables/TicketService.html":{}}}],["src/ticketbooking/ticketbooking.service.ts:138",{"_index":524,"title":{},"body":{"injectables/TicketService.html":{}}}],["src/ticketbooking/ticketbooking.service.ts:161",{"_index":523,"title":{},"body":{"injectables/TicketService.html":{}}}],["src/ticketbooking/ticketbooking.service.ts:182",{"_index":527,"title":{},"body":{"injectables/TicketService.html":{}}}],["src/ticketbooking/ticketbooking.service.ts:24",{"_index":525,"title":{},"body":{"injectables/TicketService.html":{}}}],["src/ticketbooking/ticketbooking.service.ts:52",{"_index":526,"title":{},"body":{"injectables/TicketService.html":{}}}],["src/ticketbooking/ticketbooking.service.ts:73",{"_index":519,"title":{},"body":{"injectables/TicketService.html":{}}}],["src/ticketbooking/ticketbooking.service.ts:94",{"_index":521,"title":{},"body":{"injectables/TicketService.html":{}}}],["src/user/dto/user.dto.ts",{"_index":642,"title":{},"body":{"classes/UserDto.html":{},"coverage.html":{}}}],["src/user/dto/user.dto.ts:12",{"_index":649,"title":{},"body":{"classes/UserDto.html":{}}}],["src/user/dto/user.dto.ts:20",{"_index":650,"title":{},"body":{"classes/UserDto.html":{}}}],["src/user/dto/user.dto.ts:27",{"_index":647,"title":{},"body":{"classes/UserDto.html":{}}}],["src/user/dto/user.dto.ts:35",{"_index":658,"title":{},"body":{"classes/UserDto.html":{}}}],["src/user/dto/user.dto.ts:42",{"_index":652,"title":{},"body":{"classes/UserDto.html":{}}}],["src/user/dto/user.dto.ts:46",{"_index":659,"title":{},"body":{"classes/UserDto.html":{}}}],["src/user/dto/user.dto.ts:54",{"_index":648,"title":{},"body":{"classes/UserDto.html":{}}}],["src/user/dto/user.dto.ts:62",{"_index":644,"title":{},"body":{"classes/UserDto.html":{}}}],["src/user/dto/user.dto.ts:66",{"_index":661,"title":{},"body":{"classes/UserDto.html":{}}}],["src/user/guards/jwt",{"_index":128,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"controllers/TicketController.html":{},"coverage.html":{}}}],["src/user/guards/roles.guard",{"_index":376,"title":{},"body":{"controllers/TicketController.html":{}}}],["src/user/guards/roles.guard.ts",{"_index":220,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/user/guards/roles.guard.ts:11",{"_index":224,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/user/guards/roles.guard.ts:22",{"_index":227,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/user/jwt/jwt",{"_index":138,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["src/user/jwt/jwt.strategy.ts",{"_index":144,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/user/jwt/jwt.strategy.ts:12",{"_index":149,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/user/jwt/jwt.strategy.ts:33",{"_index":154,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/user/login.dto.ts",{"_index":180,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/user/login.dto.ts:13",{"_index":190,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/user/login.dto.ts:19",{"_index":194,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/user/role/roles.decorator",{"_index":377,"title":{},"body":{"controllers/TicketController.html":{}}}],["src/user/role/roles.decorator.ts",{"_index":775,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/user/roles/role",{"_index":378,"title":{},"body":{"controllers/TicketController.html":{}}}],["src/user/roles/role.ts",{"_index":824,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/user/user.controller.ts",{"_index":583,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:26",{"_index":615,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:35",{"_index":611,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:46",{"_index":597,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:57",{"_index":604,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:67",{"_index":593,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:78",{"_index":619,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:89",{"_index":601,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.entity",{"_index":302,"title":{},"body":{"entities/TicketBooking.html":{},"classes/TicketDto.html":{},"modules/TicketModule.html":{}}}],["src/user/user.entity.ts",{"_index":563,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/user/user.entity.ts:15",{"_index":569,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:20",{"_index":570,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:25",{"_index":567,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:30",{"_index":572,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:35",{"_index":571,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:40",{"_index":574,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:45",{"_index":568,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:50",{"_index":566,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:53",{"_index":578,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.module.ts",{"_index":668,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.repository",{"_index":482,"title":{},"body":{"modules/TicketModule.html":{},"injectables/TicketService.html":{}}}],["src/user/user.repository.ts",{"_index":689,"title":{},"body":{"classes/UserRepository.html":{},"coverage.html":{}}}],["src/user/user.service.ts",{"_index":693,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:112",{"_index":701,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:13",{"_index":695,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:132",{"_index":697,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:155",{"_index":704,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:178",{"_index":700,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:25",{"_index":703,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:60",{"_index":702,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:92",{"_index":698,"title":{},"body":{"injectables/UserService.html":{}}}],["start",{"_index":849,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":852,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":854,"title":{},"body":{"index.html":{}}}],["started",{"_index":831,"title":{"index.html":{}},"body":{}}],["starter",{"_index":843,"title":{},"body":{"index.html":{}}}],["starting",{"_index":439,"title":{},"body":{"classes/TicketDto.html":{}}}],["statements",{"_index":764,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":115,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{},"entities/TicketBooking.html":{},"controllers/TicketController.html":{},"classes/TicketDto.html":{},"classes/TicketRepository.html":{},"injectables/TicketService.html":{},"miscellaneous/enumerations.html":{}}}],["status.booked",{"_index":310,"title":{},"body":{"entities/TicketBooking.html":{}}}],["status/status",{"_index":306,"title":{},"body":{"entities/TicketBooking.html":{},"classes/TicketDto.html":{},"classes/TicketRepository.html":{},"injectables/TicketService.html":{}}}],["statuscode",{"_index":120,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{}}}],["stay",{"_index":875,"title":{},"body":{"index.html":{}}}],["store",{"_index":106,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{}}}],["strategy",{"_index":159,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"entities/TicketBooking.html":{},"controllers/TicketController.html":{},"classes/TicketDto.html":{},"injectables/TicketService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["string'})@minlength(3",{"_index":447,"title":{},"body":{"classes/TicketDto.html":{},"classes/UserDto.html":{}}}],["string'})@minlength(5",{"_index":440,"title":{},"body":{"classes/TicketDto.html":{},"classes/UserDto.html":{}}}],["succcess",{"_index":214,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["succcessfully",{"_index":560,"title":{},"body":{"injectables/TicketService.html":{}}}],["success",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/ExceptionExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TicketController.html":{},"classes/TicketRepository.html":{},"injectables/TicketService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["successfullly",{"_index":559,"title":{},"body":{"injectables/TicketService.html":{}}}],["successfully",{"_index":324,"title":{},"body":{"controllers/TicketController.html":{},"injectables/TicketService.html":{},"injectables/UserService.html":{}}}],["successfully,please",{"_index":722,"title":{},"body":{"injectables/UserService.html":{}}}],["super",{"_index":164,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["super(message",{"_index":88,"title":{},"body":{"classes/CustomException.html":{}}}],["support",{"_index":868,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":885,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":796,"title":{},"body":{"dependencies.html":{}}}],["switchtohttp",{"_index":105,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{}}}],["t",{"_index":201,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["table",{"_index":254,"title":{},"body":{"entities/TicketBooking.html":{},"entities/User.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":777,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":857,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":860,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":859,"title":{},"body":{"index.html":{}}}],["tests",{"_index":856,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":866,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":36,"title":{},"body":{"controllers/AppController.html":{}}}],["this.jwtservice.sign(payload",{"_index":732,"title":{},"body":{"injectables/UserService.html":{}}}],["this.query('select",{"_index":507,"title":{},"body":{"classes/TicketRepository.html":{}}}],["this.reflectore.getallandoverride(roles_key",{"_index":239,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.ticketrepo.delete(id",{"_index":554,"title":{},"body":{"injectables/TicketService.html":{}}}],["this.ticketrepo.find",{"_index":545,"title":{},"body":{"injectables/TicketService.html":{}}}],["this.ticketrepo.findone(id",{"_index":547,"title":{},"body":{"injectables/TicketService.html":{}}}],["this.ticketrepo.finduserbyquerybuilder(id",{"_index":557,"title":{},"body":{"injectables/TicketService.html":{}}}],["this.ticketrepo.save(ticket",{"_index":538,"title":{},"body":{"injectables/TicketService.html":{}}}],["this.ticketrepo.save({...ticket,ticket:userresponse",{"_index":535,"title":{},"body":{"injectables/TicketService.html":{}}}],["this.ticketrepo.update(id,ticlet",{"_index":550,"title":{},"body":{"injectables/TicketService.html":{}}}],["this.ticketrepo.updatequerybuilder(id",{"_index":558,"title":{},"body":{"injectables/TicketService.html":{}}}],["this.ticketservice.findbookingticketbyid(id",{"_index":398,"title":{},"body":{"controllers/TicketController.html":{}}}],["this.ticketservice.findticketbookedbyname(name",{"_index":401,"title":{},"body":{"controllers/TicketController.html":{}}}],["this.ticketservice.finduserticketbyid(id",{"_index":414,"title":{},"body":{"controllers/TicketController.html":{}}}],["this.ticketservice.tickectcancel(id",{"_index":411,"title":{},"body":{"controllers/TicketController.html":{}}}],["this.ticketservice.ticketbooking(ticket",{"_index":392,"title":{},"body":{"controllers/TicketController.html":{}}}],["this.ticketservice.ticketbookinglist(ticket",{"_index":395,"title":{},"body":{"controllers/TicketController.html":{}}}],["this.ticketservice.ticketcancelled(id",{"_index":419,"title":{},"body":{"controllers/TicketController.html":{}}}],["this.ticketservice.updateticketbookingdetails(id",{"_index":408,"title":{},"body":{"controllers/TicketController.html":{}}}],["this.userrepo.delete(id",{"_index":747,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepo.find",{"_index":742,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepo.findone(id",{"_index":743,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepo.findoneorfail({emailid",{"_index":173,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["this.userrepo.save",{"_index":716,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepo.save(ticket.user",{"_index":532,"title":{},"body":{"injectables/TicketService.html":{}}}],["this.userrepo.save(user",{"_index":718,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepo.update(id",{"_index":745,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.finduserbyname(name",{"_index":637,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.finduserlist(user",{"_index":632,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.userdeletebyid(id",{"_index":641,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.userfindbyid(id",{"_index":635,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.userlogin(userlogin",{"_index":631,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.userregister(user",{"_index":628,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.userupdate(id",{"_index":639,"title":{},"body":{"controllers/UserController.html":{}}}],["three",{"_index":448,"title":{},"body":{"classes/TicketDto.html":{},"classes/UserDto.html":{}}}],["throw",{"_index":176,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/TicketService.html":{},"injectables/UserService.html":{}}}],["tickect",{"_index":337,"title":{},"body":{"controllers/TicketController.html":{}}}],["tickectcancel",{"_index":317,"title":{},"body":{"controllers/TicketController.html":{},"injectables/TicketService.html":{}}}],["tickectcancel(@param('id",{"_index":410,"title":{},"body":{"controllers/TicketController.html":{}}}],["tickectcancel(id",{"_index":341,"title":{},"body":{"controllers/TicketController.html":{},"injectables/TicketService.html":{}}}],["ticked",{"_index":548,"title":{},"body":{"injectables/TicketService.html":{}}}],["ticket",{"_index":287,"title":{},"body":{"entities/TicketBooking.html":{},"controllers/TicketController.html":{},"classes/TicketDto.html":{},"modules/TicketModule.html":{},"classes/TicketRepository.html":{},"injectables/TicketService.html":{}}}],["ticket_booking",{"_index":506,"title":{},"body":{"classes/TicketRepository.html":{}}}],["ticketbooking",{"_index":249,"title":{"entities/TicketBooking.html":{}},"body":{"entities/TicketBooking.html":{},"controllers/TicketController.html":{},"modules/TicketModule.html":{},"classes/TicketRepository.html":{},"injectables/TicketService.html":{},"entities/User.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["ticketbooking(@body",{"_index":391,"title":{},"body":{"controllers/TicketController.html":{}}}],["ticketbooking(ticket",{"_index":345,"title":{},"body":{"controllers/TicketController.html":{},"injectables/TicketService.html":{}}}],["ticketbooking.controller",{"_index":483,"title":{},"body":{"modules/TicketModule.html":{}}}],["ticketbooking.entity",{"_index":484,"title":{},"body":{"modules/TicketModule.html":{},"classes/TicketRepository.html":{}}}],["ticketbooking.repository",{"_index":486,"title":{},"body":{"modules/TicketModule.html":{},"injectables/TicketService.html":{}}}],["ticketbooking.service",{"_index":381,"title":{},"body":{"controllers/TicketController.html":{},"modules/TicketModule.html":{}}}],["ticketbooking.user",{"_index":577,"title":{},"body":{"entities/User.html":{}}}],["ticketbooking/ticketbooking.module",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["ticketbookinglist",{"_index":318,"title":{},"body":{"controllers/TicketController.html":{},"injectables/TicketService.html":{}}}],["ticketbookinglist(ticket",{"_index":351,"title":{},"body":{"controllers/TicketController.html":{},"injectables/TicketService.html":{}}}],["ticketcancelled",{"_index":319,"title":{},"body":{"controllers/TicketController.html":{},"injectables/TicketService.html":{}}}],["ticketcancelled(@param('id')id",{"_index":418,"title":{},"body":{"controllers/TicketController.html":{}}}],["ticketcancelled(id",{"_index":356,"title":{},"body":{"controllers/TicketController.html":{},"injectables/TicketService.html":{}}}],["ticketcontroller",{"_index":311,"title":{"controllers/TicketController.html":{}},"body":{"controllers/TicketController.html":{},"modules/TicketModule.html":{},"coverage.html":{}}}],["ticketdto",{"_index":346,"title":{"classes/TicketDto.html":{}},"body":{"controllers/TicketController.html":{},"classes/TicketDto.html":{},"injectables/TicketService.html":{},"coverage.html":{}}}],["ticketdto})@apicreatedresponse({description",{"_index":348,"title":{},"body":{"controllers/TicketController.html":{}}}],["ticketmodule",{"_index":46,"title":{"modules/TicketModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TicketModule.html":{},"modules.html":{},"overview.html":{}}}],["ticketrepo",{"_index":518,"title":{},"body":{"injectables/TicketService.html":{}}}],["ticketrepository",{"_index":485,"title":{"classes/TicketRepository.html":{}},"body":{"modules/TicketModule.html":{},"classes/TicketRepository.html":{},"injectables/TicketService.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["ticketservice",{"_index":380,"title":{"injectables/TicketService.html":{}},"body":{"controllers/TicketController.html":{},"modules/TicketModule.html":{},"injectables/TicketService.html":{},"coverage.html":{},"overview.html":{}}}],["ticlet",{"_index":403,"title":{},"body":{"controllers/TicketController.html":{},"injectables/TicketService.html":{}}}],["time",{"_index":124,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{}}}],["token",{"_index":731,"title":{},"body":{"injectables/UserService.html":{}}}],["token,status:'login",{"_index":734,"title":{},"body":{"injectables/UserService.html":{}}}],["topsecret51",{"_index":680,"title":{},"body":{"modules/UserModule.html":{}}}],["total",{"_index":267,"title":{},"body":{"entities/TicketBooking.html":{}}}],["touch",{"_index":876,"title":{},"body":{"index.html":{}}}],["transform",{"_index":754,"title":{},"body":{"interfaces/ValidationPipeOptions.html":{}}}],["transformer",{"_index":792,"title":{},"body":{"dependencies.html":{}}}],["transforminterceptor",{"_index":211,"title":{"injectables/TransformInterceptor.html":{}},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["travels",{"_index":295,"title":{},"body":{"entities/TicketBooking.html":{}}}],["trelvals",{"_index":457,"title":{},"body":{"classes/TicketDto.html":{}}}],["trevals",{"_index":270,"title":{},"body":{"entities/TicketBooking.html":{},"classes/TicketDto.html":{}}}],["trevalsbookingdate",{"_index":261,"title":{},"body":{"entities/TicketBooking.html":{},"classes/TicketDto.html":{}}}],["trevalsdate",{"_index":262,"title":{},"body":{"entities/TicketBooking.html":{},"classes/TicketDto.html":{}}}],["true",{"_index":243,"title":{},"body":{"guards/RolesGuard.html":{},"entities/TicketBooking.html":{},"controllers/TicketController.html":{},"entities/User.html":{}}}],["true})@apiokresponse({description",{"_index":322,"title":{},"body":{"controllers/TicketController.html":{}}}],["true})@roles(role.admin)@useguards(rolesguard)@apiokresponse({description",{"_index":357,"title":{},"body":{"controllers/TicketController.html":{}}}],["try",{"_index":171,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/TicketService.html":{},"injectables/UserService.html":{}}}],["twitter",{"_index":881,"title":{},"body":{"index.html":{}}}],["type",{"_index":101,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"entities/TicketBooking.html":{},"controllers/TicketController.html":{},"classes/TicketDto.html":{},"classes/TicketRepository.html":{},"injectables/TicketService.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{},"interfaces/ValidationPipeOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":304,"title":{},"body":{"entities/TicketBooking.html":{},"classes/TicketRepository.html":{},"entities/User.html":{},"classes/UserRepository.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"modules/TicketModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":684,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forroot(),usermodule,ticketmodule",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["typescript",{"_index":842,"title":{},"body":{"index.html":{}}}],["ui",{"_index":812,"title":{},"body":{"dependencies.html":{}}}],["unauthorizedexception",{"_index":706,"title":{},"body":{"injectables/UserService.html":{}}}],["unauthorizedexception('invalid",{"_index":738,"title":{},"body":{"injectables/UserService.html":{}}}],["undefined",{"_index":282,"title":{},"body":{"entities/TicketBooking.html":{},"entities/User.html":{}}}],["undefined})@apiinternalservererrorresponse({description",{"_index":325,"title":{},"body":{"controllers/TicketController.html":{}}}],["undefined})@apinotfoundresponse({description",{"_index":326,"title":{},"body":{"controllers/TicketController.html":{}}}],["undefined})@delete('/tickectcancel/:id",{"_index":343,"title":{},"body":{"controllers/TicketController.html":{}}}],["undefined})@get('/findbookingticketbyid/:id",{"_index":327,"title":{},"body":{"controllers/TicketController.html":{}}}],["undefined})@get('/findticketbookedbyname/:name",{"_index":331,"title":{},"body":{"controllers/TicketController.html":{}}}],["undefined})@get('/finduserticketbyid/:id",{"_index":335,"title":{},"body":{"controllers/TicketController.html":{}}}],["undefined})@get('/ticketbookinglist",{"_index":354,"title":{},"body":{"controllers/TicketController.html":{}}}],["undefined})@patch('/ticketcancelled/:id",{"_index":358,"title":{},"body":{"controllers/TicketController.html":{}}}],["undefined})@post('/ticketbooking",{"_index":349,"title":{},"body":{"controllers/TicketController.html":{}}}],["unique",{"_index":309,"title":{},"body":{"entities/TicketBooking.html":{},"entities/User.html":{}}}],["unit",{"_index":855,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":156,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/TicketRepository.html":{},"injectables/TicketService.html":{},"injectables/UserService.html":{}}}],["update",{"_index":405,"title":{},"body":{"controllers/TicketController.html":{},"injectables/UserService.html":{}}}],["update(ticketbooking",{"_index":510,"title":{},"body":{"classes/TicketRepository.html":{}}}],["updated",{"_index":404,"title":{},"body":{"controllers/TicketController.html":{},"injectables/TicketService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updatequerybuilder",{"_index":497,"title":{},"body":{"classes/TicketRepository.html":{},"injectables/TicketService.html":{}}}],["updatequerybuilder(id",{"_index":500,"title":{},"body":{"classes/TicketRepository.html":{}}}],["updateticketbookingdetails",{"_index":402,"title":{},"body":{"controllers/TicketController.html":{},"injectables/TicketService.html":{}}}],["updateticketbookingdetails(@param('id",{"_index":407,"title":{},"body":{"controllers/TicketController.html":{}}}],["updateticketbookingdetails(id",{"_index":549,"title":{},"body":{"injectables/TicketService.html":{}}}],["url",{"_index":122,"title":{},"body":{"classes/ExceptionExceptionFilter.html":{}}}],["usefilters(exceptionexceptionfilter",{"_index":633,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards",{"_index":366,"title":{},"body":{"controllers/TicketController.html":{}}}],["useguards(jwtauthguard",{"_index":382,"title":{},"body":{"controllers/TicketController.html":{},"controllers/UserController.html":{}}}],["useguards(rolesguard",{"_index":416,"title":{},"body":{"controllers/TicketController.html":{},"controllers/UserController.html":{}}}],["user",{"_index":150,"title":{"entities/User.html":{}},"body":{"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"guards/RolesGuard.html":{},"entities/TicketBooking.html":{},"classes/TicketDto.html":{},"modules/TicketModule.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["user.controller",{"_index":674,"title":{},"body":{"modules/UserModule.html":{}}}],["user.entity",{"_index":675,"title":{},"body":{"modules/UserModule.html":{},"classes/UserRepository.html":{}}}],["user.password=hashedpassword",{"_index":717,"title":{},"body":{"injectables/UserService.html":{}}}],["user.repository",{"_index":161,"title":{},"body":{"injectables/JwtStrategy.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["user.role?.includes(role",{"_index":247,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user.service",{"_index":624,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.ticketbooking",{"_index":300,"title":{},"body":{"entities/TicketBooking.html":{}}}],["user/user.module",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["usercontroller",{"_index":582,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdeletebyid",{"_index":586,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["userdeletebyid(@param('id",{"_index":640,"title":{},"body":{"controllers/UserController.html":{}}}],["userdeletebyid(id",{"_index":599,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["userdto",{"_index":595,"title":{"classes/UserDto.html":{}},"body":{"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["userfindbyid",{"_index":587,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["userfindbyid(@param('id",{"_index":634,"title":{},"body":{"controllers/UserController.html":{}}}],["userfindbyid(id",{"_index":602,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["userid",{"_index":189,"title":{},"body":{"classes/LoginDto.html":{},"entities/TicketBooking.html":{}}}],["userinfo",{"_index":726,"title":{},"body":{"injectables/UserService.html":{}}}],["userinfo.emailid",{"_index":730,"title":{},"body":{"injectables/UserService.html":{}}}],["userinfo.password",{"_index":729,"title":{},"body":{"injectables/UserService.html":{}}}],["userlogin",{"_index":588,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["userlogin(@body",{"_index":629,"title":{},"body":{"controllers/UserController.html":{}}}],["userlogin(userlogin",{"_index":609,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["userlogin.emailid",{"_index":727,"title":{},"body":{"injectables/UserService.html":{}}}],["usermodule",{"_index":47,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["userregister",{"_index":589,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["userregister(@body",{"_index":627,"title":{},"body":{"controllers/UserController.html":{}}}],["userregister(user",{"_index":613,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["userrepo",{"_index":152,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/TicketService.html":{},"injectables/UserService.html":{}}}],["userrepository",{"_index":148,"title":{"classes/UserRepository.html":{}},"body":{"injectables/JwtStrategy.html":{},"modules/TicketModule.html":{},"injectables/TicketService.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["userrepository,ticketbooking,ticketrepository",{"_index":685,"title":{},"body":{"modules/UserModule.html":{}}}],["userresponse",{"_index":531,"title":{},"body":{"injectables/TicketService.html":{}}}],["userservice",{"_index":623,"title":{"injectables/UserService.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userservice,jwtstrategy",{"_index":688,"title":{},"body":{"modules/UserModule.html":{}}}],["userupdate",{"_index":590,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["userupdate(@param('id",{"_index":638,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["userupdate(id",{"_index":617,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["userupdatebyid",{"_index":620,"title":{},"body":{"controllers/UserController.html":{}}}],["valid",{"_index":188,"title":{},"body":{"classes/LoginDto.html":{}}}],["validate",{"_index":146,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["validate(payload",{"_index":153,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validated",{"_index":724,"title":{},"body":{"injectables/UserService.html":{}}}],["validatein",{"_index":756,"title":{},"body":{"interfaces/ValidationPipeOptions.html":{}}}],["validating",{"_index":612,"title":{},"body":{"controllers/UserController.html":{}}}],["validation",{"_index":758,"title":{},"body":{"interfaces/ValidationPipeOptions.html":{}}}],["validationerror",{"_index":759,"title":{},"body":{"interfaces/ValidationPipeOptions.html":{}}}],["validationpipeoptions",{"_index":749,"title":{"interfaces/ValidationPipeOptions.html":{}},"body":{"interfaces/ValidationPipeOptions.html":{},"coverage.html":{}}}],["validator",{"_index":197,"title":{},"body":{"classes/LoginDto.html":{},"classes/TicketDto.html":{},"entities/User.html":{},"classes/UserDto.html":{},"interfaces/ValidationPipeOptions.html":{},"dependencies.html":{}}}],["validatoroptions",{"_index":751,"title":{},"body":{"interfaces/ValidationPipeOptions.html":{}}}],["value",{"_index":823,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":776,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":891,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["watch",{"_index":850,"title":{},"body":{"index.html":{}}}],["website",{"_index":879,"title":{},"body":{"index.html":{}}}],["where(\"id",{"_index":513,"title":{},"body":{"classes/TicketRepository.html":{}}}],["world",{"_index":66,"title":{},"body":{"injectables/AppService.html":{}}}],["write",{"_index":385,"title":{},"body":{"controllers/TicketController.html":{},"injectables/TicketService.html":{},"injectables/UserService.html":{}}}],["year",{"_index":664,"title":{},"body":{"classes/UserDto.html":{}}}],["year'})@maxlength(3",{"_index":643,"title":{},"body":{"classes/UserDto.html":{}}}],["yes",{"_index":822,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["you'd",{"_index":871,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/TicketModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                app controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:19\n                \n            \n\n\n            \n                \n                    simple methods\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n/**\n * app controller\n * @author Md Nasir Hussain\n */\n@Controller()\nexport class AppController {\n  /**\n   * app serive class\n   * @param appService \n   */\n  constructor(private readonly appService: AppService) {}\n/**\n * simple methods\n * @returns if success or failure\n */\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nTicketModule\n\nTicketModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nTicketModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            app module class\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            TicketModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { TicketModule } from './ticketbooking/ticketbooking.module';\nimport { UserModule } from './user/user.module';\n/**\n * app module class\n */\n@Module({\n  imports: [TypeOrmModule.forRoot(),UserModule,TicketModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\n/**\n * app module\n */\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n            \n                Description\n            \n            \n                app service class\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:11\n                \n            \n\n\n            \n                \n                    simple methods\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n/**\n * app service class\n */\n@Injectable()\nexport class AppService {\n  /**\n   * simple methods\n   * @returns if success or failure\n   */\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CustomException.html":{"url":"classes/CustomException.html","title":"class - CustomException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CustomException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/custom-exception/custom-exception.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                custom exception class\n\n            \n\n            \n                Extends\n            \n            \n                    HttpException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message)\n                    \n                \n                        \n                            \n                                Defined in src/common/custom-exception/custom-exception.exception.ts:7\n                            \n                        \n\n                \n                    \n                            constructor creation\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                path\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, HttpStatus } from \"@nestjs/common\";\n\n/**\n * custom exception class\n * @author hotel managements\n */\n export class CustomException extends HttpException {\n    /**\n     * constructor creation\n     * @param message  path\n     */\n    constructor(message) {\n        super(message, HttpStatus.NOT_FOUND);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExceptionExceptionFilter.html":{"url":"classes/ExceptionExceptionFilter.html","title":"class - ExceptionExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExceptionExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exception-filter/exception-filter.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                ExceptionExceptionFilter\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: any, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/common/exception-filter/exception-filter.filter.ts:15\n                \n            \n\n\n            \n                \n                    ExceptionExceptionFilter class\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        path\n\n                                    \n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        path\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ArgumentsHost, Catch, ExceptionFilter } from \"@nestjs/common\";\nimport { Request, Response } from \"express\";\n/**\n * ExceptionExceptionFilter\n * @author Md Nasir Hussain\n */\n@Catch()\nexport class ExceptionExceptionFilter implements ExceptionFilter {\n    /**\n     * ExceptionExceptionFilter class\n     * @param exception path\n     * @param host path\n     * @returns if success or failure\n     */\n    catch(exception: any, host: ArgumentsHost) {\n        /**\n         * switchToHttp and store data\n         */\n        let ctx = host.switchToHttp();\n        /**\n         * getRequest and store\n         */\n        let request = ctx.getRequest();\n        /**\n         * getResponse and store\n         */\n        let response = ctx.getResponse();\n        /**\n         * getStatus and store\n         */\n        let status = exception.getStatus();\n        /**\n         * return here response,statusCode,message,url,time\n         */\n        return response.status(status).json({\n            statusCode: status,\n            message: exception.message,\n            url: request.url,\n            time: new Date().toISOString()\n        });\n\n\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/guards/jwt-auth.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                jwt guards\n\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { AuthGuard } from \"@nestjs/passport\";\n/**\n * jwt guards\n * @author Md Nasir Hussain\n */\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt'){\n\n}\n    \n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/jwt/jwt-payload.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                interface jwtpayload\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            emailId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        emailId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        emailId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    rolse\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface JwtPayload {\n    /**\n     * rolse \n     */\n    emailId: string\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/jwt/jwt.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                JwtStrategy class\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepo: UserRepository)\n                    \n                \n                        \n                            \n                                Defined in src/user/jwt/jwt.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            user repo injectable\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepo\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/user/jwt/jwt.strategy.ts:33\n                \n            \n\n\n            \n                \n                    user validate\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        path\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from \"@nestjs/common\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { ExtractJwt, Strategy } from \"passport-jwt\";\nimport { UserRepository } from \"../user.repository\";\nimport { JwtPayload } from \"./jwt-payload.interface\";\n\n/**\n * JwtStrategy class\n * @author hotel managements\n */\n @Injectable()\n export class JwtStrategy extends PassportStrategy(Strategy) {\n     /**\n      * user repo injectable\n      * @param userRepo \n      */\n     constructor(private userRepo: UserRepository) {\n         /**\n          * super class\n          */\n         \n         super({\n             secretOrKey:'topSecret51',\n             jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(), \n         })\n        \n     }\n /**\n  * user validate\n  * @param payload path\n  * @returns if success or failure\n  */\n     async validate(payload: JwtPayload) {\n         console.log('payload function colling');\n         try {\n             let response = await this.userRepo.findOneOrFail({emailId: payload.emailId});\n             return response;\n             \n         }\n         catch (error) {\n             throw new HttpException(error.message, HttpStatus.UNAUTHORIZED)\n \n         }\n     }\n }\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/login.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                login dto\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                emailId\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        emailId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'User id required'})@IsEmail({messaage: 'Enter valid userId'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/login.dto.ts:13\n                        \n                    \n\n            \n                \n                    User id required\nemail colume name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'User password required'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/login.dto.ts:19\n                        \n                    \n\n            \n                \n                    user password required\nuser password colume name\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty } from \"class-validator\";\n/**\n * login dto\n * @author Md Nasir Hussain\n */\nexport class LoginDto {\n    /**\n     * User id required\n     * email colume name\n     */\n    @IsNotEmpty({ message: \"User id required\" })\n    @IsEmail({ messaage: \"Enter valid userId\" })\n    emailId: string;\n    /**\n     * user password required\n     * user password colume name\n     */\n    @IsNotEmpty({ message: \"User password required\" })\n    password: string;\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Response.html":{"url":"interfaces/Response.html","title":"interface - Response","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Response\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/transform-interceptor/transform.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                interface response class\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    create object\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, NestInterceptor, ExecutionContext, CallHandler } from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n/**\n * interface response class\n * @author Md Nasir Hussain\n */\nexport interface Response {\n  /**\n   * create object\n   */\n  data: T;\n}\n/**\n * TransformInterceptor class\n */\n@Injectable()\nexport class TransformInterceptor implements NestInterceptor> {\n  /**\n   * ExecutionContext\n   * @param context  path\n   * @param next path\n   * @returns if succcess or failure\n   */\n  intercept(context: ExecutionContext, next: CallHandler): Observable> {\n    /**\n     * return maping data\n     */\n    return next.handle().pipe(map(data => ({ data })));\n  }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/user/guards/roles.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    rolse guards\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflectore: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/user/guards/roles.guard.ts:11\n                            \n                        \n\n                \n                    \n                            injectable reflectore\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        reflectore\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                path\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/user/guards/roles.guard.ts:22\n                \n            \n\n\n            \n                \n                    can activate methods\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        path\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from \"@nestjs/common\";\nimport { Reflector } from \"@nestjs/core\";\nimport { Observable } from \"rxjs\";\nimport { ROLES_KEY } from \"../role/roles.decorator\";\nimport { Role } from \"../roles/role\";\n/**\n * rolse guards\n * @author guards\n */\n@Injectable()\nexport  class RolesGuard implements CanActivate{\n  /**\n   * injectable reflectore\n   * @param reflectore path\n   */\n    constructor(private reflectore:Reflector){}\n    /**\n     * can activate methods\n     * @param context path\n     * @returns if success or failure\n     */\n    canActivate(context: ExecutionContext): boolean | Promise | Observable {\n         /**\n     * requiredRoles\n     */\n    const requiredRoles = this.reflectore.getAllAndOverride(ROLES_KEY, [\n        context.getHandler(),\n        context.getClass(),\n      ]);\n      /**\n       * checking rolse\n       */\n      if (!requiredRoles) {\n        return true;\n      }\n      /**\n       * user role\n       */\n      const { user } = context.switchToHttp().getRequest();\n      /**\n       * return roles\n       */\n      return requiredRoles.some((role) => user.role?.includes(role));\n    }\n    }\n    \n\n        \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/TicketBooking.html":{"url":"entities/TicketBooking.html","title":"entity - TicketBooking","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  TicketBooking\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/ticketbooking/ticketbooking.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                TicketBooking mapping database table colume here\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                age\n                            \n                            \n                                fare\n                            \n                            \n                                from\n                            \n                            \n                                gender\n                            \n                            \n                                id\n                            \n                            \n                                meal_preference\n                            \n                            \n                                name\n                            \n                            \n                                sataus\n                            \n                            \n                                seat_number\n                            \n                            \n                                to\n                            \n                            \n                                trevalsBookingDate\n                            \n                            \n                                trevalsDate\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ticketbooking/ticketbooking.entity.ts:30\n                        \n                    \n\n            \n                \n                    age colume name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fare\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ticketbooking/ticketbooking.entity.ts:60\n                        \n                    \n\n            \n                \n                    total amount of fare\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        from\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ticketbooking/ticketbooking.entity.ts:40\n                        \n                    \n\n            \n                \n                    trevals place\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ticketbooking/ticketbooking.entity.ts:35\n                        \n                    \n\n            \n                \n                    gender colume name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ticketbooking/ticketbooking.entity.ts:15\n                        \n                    \n\n            \n                \n                    Genereting id as primary key here\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        meal_preference\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Meal\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: Meal, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ticketbooking/ticketbooking.entity.ts:65\n                        \n                    \n\n            \n                \n                    generating enum type for meal is alllow or not\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ticketbooking/ticketbooking.entity.ts:25\n                        \n                    \n\n            \n                \n                    ticket booking colume name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sataus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Status\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: Status, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ticketbooking/ticketbooking.entity.ts:75\n                        \n                    \n\n            \n                \n                    ticket booked or not\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seat_number\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ticketbooking/ticketbooking.entity.ts:70\n                        \n                    \n\n            \n                \n                    ticket number colume name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        to\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ticketbooking/ticketbooking.entity.ts:45\n                        \n                    \n\n            \n                \n                    ending travels place\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        trevalsBookingDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ticketbooking/ticketbooking.entity.ts:55\n                        \n                    \n\n            \n                \n                    trevalsBookingDate\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        trevalsDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ticketbooking/ticketbooking.entity.ts:50\n                        \n                    \n\n            \n                \n                    trevals date\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.ticketBooking)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ticketbooking/ticketbooking.entity.ts:79\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { User } from \"src/user/user.entity\";\nimport { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from \"typeorm\";\nimport { Meal } from \"./meals/meals\";\nimport { Status } from \"./status/status\";\n/**\n * TicketBooking mapping database table colume here\n * @author Md Nasir Hussain\n */\n@Entity()\nexport class TicketBooking {\n  /**\n    * Genereting id as primary key here\n    */\n  @PrimaryGeneratedColumn()\n  id: number;\n  /**\n   * ticket booking userId colume name(foreignkey)\n   */\n  //@Column()\n  //userId\n  /**\n   * ticket booking colume name\n   */\n  @Column()\n  name: string;\n  /**\n   * age colume name\n   */\n  @Column()\n  age: number;\n  /**\n   * gender colume name\n   */\n  @Column()\n  gender: string;\n  /**\n   * trevals place\n   */\n  @Column()\n  from: string;\n  /**\n   * ending travels place\n   */\n  @Column()\n  to: string;\n  /**\n   * trevals date\n   */\n  @Column()\n  trevalsDate: string;\n  /**\n   * trevalsBookingDate\n   */\n  @Column()\n  trevalsBookingDate: string\n  /**\n   * total amount of fare\n   */\n  @Column()\n  fare: number\n  /**\n   * generating enum type for meal is alllow or not \n   */\n  @Column({ type: 'enum', enum: Meal, default: Meal.Yes })\n  meal_preference: Meal;\n  /**\n   * ticket number colume name\n   */\n  @Column({ unique: true })\n  seat_number: number;\n  /**\n   * ticket booked or not \n   */\n  @Column({ type: 'enum', enum: Status, default: Status.Booked })\n  sataus: Status;\n\n  \n  @ManyToOne(()=> User, user=> user.ticketBooking)\n    user: User;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TicketController.html":{"url":"controllers/TicketController.html","title":"controller - TicketController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TicketController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/ticketbooking/ticketbooking.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                ticket\n            \n\n\n            \n                Description\n            \n            \n                TicketController\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findBookingTicketById\n                            \n                            \n                                findTicketBookedByName\n                            \n                            \n                                findUserTicketById\n                            \n                            \n                                tickectCancel\n                            \n                            \n                                ticketBooking\n                            \n                            \n                                ticketBookingList\n                            \n                            \n                                ticketCancelled\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        findBookingTicketById\n                        \n                    \n                \n            \n            \n                \nfindBookingTicketById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiParam({name: 'id', description: 'name id', required: true})@ApiOkResponse({description: 'Ticketbooking found by id successfully', status: undefined})@ApiInternalServerErrorResponse({description: 'Ticket not found for this id', status: undefined})@ApiNotFoundResponse({description: 'Ticket not booked for this id', status: undefined})@Get('/findBookingTicketById/:id')\n                \n            \n\n            \n                \n                    Defined in src/ticketbooking/ticketbooking.controller.ts:60\n                \n            \n\n\n            \n                \n                    findBookingTicketById\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        passing path\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findTicketBookedByName\n                        \n                    \n                \n            \n            \n                \nfindTicketBookedByName(name: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiParam({name: 'name', description: 'Ticket name', required: true})@ApiOkResponse({description: 'Ticket found by name successfully', status: undefined})@ApiInternalServerErrorResponse({description: 'Ticket not found for name', status: undefined})@ApiNotFoundResponse({description: 'Ticket not booked for name', status: undefined})@Get('/findTicketBookedByName/:name')\n                \n            \n\n            \n                \n                    Defined in src/ticketbooking/ticketbooking.controller.ts:77\n                \n            \n\n\n            \n                \n                    findTicketBookedByName\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        passing path\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findUserTicketById\n                        \n                    \n                \n            \n            \n                \nfindUserTicketById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiParam({name: 'id', description: 'Ticket id', required: true})@ApiOkResponse({description: 'Ticket finding by id successfully', status: undefined})@ApiInternalServerErrorResponse({description: 'Ticket not found by  for this id', status: undefined})@ApiNotFoundResponse({description: 'Ticket not booked for id', status: undefined})@Get('/findUserTicketById/:id')\n                \n            \n\n            \n                \n                    Defined in src/ticketbooking/ticketbooking.controller.ts:131\n                \n            \n\n\n            \n                \n                    tickect find by query builder\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        passing path\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tickectCancel\n                        \n                    \n                \n            \n            \n                \ntickectCancel(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiParam({name: 'id', description: 'Ticket id', required: true})@ApiOkResponse({description: 'Ticket cancel successfully', status: undefined})@ApiInternalServerErrorResponse({description: 'Ticket not cancel for this id', status: undefined})@ApiNotFoundResponse({description: 'Ticket not booked for id', status: undefined})@Delete('/tickectCancel/:id')\n                \n            \n\n            \n                \n                    Defined in src/ticketbooking/ticketbooking.controller.ts:114\n                \n            \n\n\n            \n                \n                    tickectCancel\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        passing path\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ticketBooking\n                        \n                    \n                \n            \n            \n                \nticketBooking(ticket: TicketDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBody({description: 'TicketDto', required: true, type: TicketDto})@ApiCreatedResponse({description: 'Ticket booked successfully', status: undefined})@ApiInternalServerErrorResponse({description: 'Ticket not booked successfully', status: undefined})@Post('/ticketBooking')\n                \n            \n\n            \n                \n                    Defined in src/ticketbooking/ticketbooking.controller.ts:31\n                \n            \n\n\n            \n                \n                    ticketbooking\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ticket\n                                    \n                                                TicketDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        passing path\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ticketBookingList\n                        \n                    \n                \n            \n            \n                \nticketBookingList(ticket: TicketDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOkResponse({description: 'Ticket booking list', status: undefined})@ApiInternalServerErrorResponse({description: 'Ticket booking list not found', status: undefined})@Get('/ticketBookingList')\n                \n            \n\n            \n                \n                    Defined in src/ticketbooking/ticketbooking.controller.ts:43\n                \n            \n\n\n            \n                \n                    ticketBookingList\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ticket\n                                    \n                                                TicketDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        passing path\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ticketCancelled\n                        \n                    \n                \n            \n            \n                \nticketCancelled(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiParam({name: 'id', description: 'Ticket id', required: true})@Roles(Role.Admin)@UseGuards(RolesGuard)@ApiOkResponse({description: 'Ticket finding by id successfully', status: undefined})@ApiInternalServerErrorResponse({description: 'Ticket not found by  for this id', status: undefined})@ApiNotFoundResponse({description: 'Ticket not booked for id', status: undefined})@Patch('/ticketCancelled/:id')\n                \n            \n\n            \n                \n                    Defined in src/ticketbooking/ticketbooking.controller.ts:151\n                \n            \n\n\n            \n                \n                    tickect find by query builder\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        passing path\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, HttpStatus, Param, ParseIntPipe, Patch, Post, Put, UseGuards } from \"@nestjs/common\";\nimport { ApiBody, ApiCreatedResponse, ApiInternalServerErrorResponse, ApiNotFoundResponse, ApiOkResponse, ApiParam, ApiTags } from \"@nestjs/swagger\";\nimport { JwtAuthGuard } from \"src/user/guards/jwt-auth.guard\";\nimport { RolesGuard } from \"src/user/guards/roles.guard\";\nimport { Roles } from \"src/user/role/roles.decorator\";\nimport { Role } from \"src/user/roles/role\";\nimport { TicketDto } from \"./dto/ticketbooking.dto\";\nimport { TicketService } from \"./ticketbooking.service\";\n/**\n * TicketController\n * @author Md Nasir Hussain\n */\n //@UseGuards(JwtAuthGuard)\n@ApiTags('Ticket')\n@Controller('ticket')\nexport class TicketController {\n    /**\n     * ticketService, we will write business logic here \n     * @param ticketService  path\n     */\n    constructor(private ticketService: TicketService) { }\n    /**\n      * ticketbooking\n      * @param ticket passing path\n      * @returns if success or failure\n      */\n    @ApiBody({ description: 'TicketDto', required: true, type: TicketDto })\n    @ApiCreatedResponse({ description: 'Ticket booked successfully', status: HttpStatus.CREATED })\n    @ApiInternalServerErrorResponse({ description: 'Ticket not booked successfully', status: HttpStatus.INTERNAL_SERVER_ERROR })\n    @Post('/ticketBooking')\n    ticketBooking(@Body() ticket: TicketDto): Promise {\n        return this.ticketService.ticketBooking(ticket)\n    }\n    /**\n     * ticketBookingList\n     * @param ticket passing path\n     * @returns if success or failure\n     */\n    \n    @ApiOkResponse({ description: 'Ticket booking list', status: HttpStatus.OK })\n    @ApiInternalServerErrorResponse({ description: \"Ticket booking list not found\", status: HttpStatus.INTERNAL_SERVER_ERROR })\n    @Get('/ticketBookingList')\n    ticketBookingList(ticket: TicketDto): Promise {\n        return this.ticketService.ticketBookingList(ticket)\n    }\n    /**\n     * findBookingTicketById\n     * @param id passing path\n     * @returns if success or failure\n     */\n    @ApiParam({\n        name: 'id',\n        description: 'name id',\n        required: true\n    })\n    @ApiOkResponse({ description: 'Ticketbooking found by id successfully', status: HttpStatus.OK })\n    @ApiInternalServerErrorResponse({ description: 'Ticket not found for this id', status: HttpStatus.INTERNAL_SERVER_ERROR })\n    @ApiNotFoundResponse({ description: 'Ticket not booked for this id', status: HttpStatus.NOT_FOUND })\n    @Get('/findBookingTicketById/:id')\n    findBookingTicketById(@Param('id', ParseIntPipe) id: number) {\n        return this.ticketService.findBookingTicketById(id);\n    }\n    /**\n     * findTicketBookedByName\n     * @param name passing path\n     * @returns if success or failure\n     */\n    @ApiParam({\n        name: 'name',\n        description: 'Ticket name',\n        required: true\n    })\n    @ApiOkResponse({ description: 'Ticket found by name successfully', status: HttpStatus.OK })\n    @ApiInternalServerErrorResponse({ description: 'Ticket not found for name', status: HttpStatus.INTERNAL_SERVER_ERROR })\n    @ApiNotFoundResponse({ description: 'Ticket not booked for name', status: HttpStatus.NOT_FOUND })\n    @Get('/findTicketBookedByName/:name')\n    findTicketBookedByName(@Param('name') name: string): Promise {\n        return this.ticketService.findTicketBookedByName(name);\n    }\n    /**\n     * updateTicketBookingDetails\n     * @param id passing path\n     * @param ticlet  passing path\n     * @returns if success or failure\n     */\n    /*\n    @ApiParam({\n        name: 'id',\n        description: 'Ticket id',\n        required: true\n    })\n    @ApiOkResponse({ description: 'Ticket updated successfully by id', status: HttpStatus.OK })\n    @ApiInternalServerErrorResponse({ description: 'Ticket not updated for this id', status: HttpStatus.INTERNAL_SERVER_ERROR })\n    @ApiNotFoundResponse({ description: 'Ticket not update for this id', status: HttpStatus.NOT_FOUND })\n    @Put('/updateTicketBookingDetails/:id')\n    updateTicketBookingDetails(@Param('id', ParseIntPipe) id: number, @Body() ticlet: TicketDto): Promise {\n        return this.ticketService.updateTicketBookingDetails(id, ticlet);\n    }\n    */\n    /**\n     * tickectCancel\n     * @param id passing path \n     * @returns if success or failure\n     */\n    @ApiParam({\n        name: 'id',\n        description: 'Ticket id',\n        required: true\n    })\n    @ApiOkResponse({ description: 'Ticket cancel successfully', status: HttpStatus.OK })\n    @ApiInternalServerErrorResponse({ description: 'Ticket not cancel for this id', status: HttpStatus.INTERNAL_SERVER_ERROR })\n    @ApiNotFoundResponse({ description: 'Ticket not booked for id', status: HttpStatus.NOT_FOUND })\n    @Delete('/tickectCancel/:id')\n    tickectCancel(@Param('id', ParseIntPipe) id: number) {\n        return this.ticketService.tickectCancel(id);\n    }\n    /**\n         * tickect find by query builder\n         * @param id passing path \n         * @returns if success or failure\n         */\n    @ApiParam({\n        name: 'id',\n        description: 'Ticket id',\n        required: true\n    })\n    @ApiOkResponse({ description: 'Ticket finding by id successfully', status: HttpStatus.OK })\n    @ApiInternalServerErrorResponse({ description: 'Ticket not found by  for this id', status: HttpStatus.INTERNAL_SERVER_ERROR })\n    @ApiNotFoundResponse({ description: 'Ticket not booked for id', status: HttpStatus.NOT_FOUND })\n    @Get('/findUserTicketById/:id')\n    findUserTicketById(@Param('id', ParseIntPipe) id: number) {\n        return this.ticketService.findUserTicketById(id)\n    }\n\n    /**\n     * tickect find by query builder\n     * @param id passing path \n     * @returns if success or failure\n    */\n    @ApiParam({\n        name: 'id',\n        description: 'Ticket id',\n        required: true\n    })\n    @Roles(Role.Admin)\n    @UseGuards(RolesGuard)\n    @ApiOkResponse({ description: 'Ticket finding by id successfully', status: HttpStatus.OK })\n    @ApiInternalServerErrorResponse({ description: 'Ticket not found by  for this id', status: HttpStatus.INTERNAL_SERVER_ERROR })\n    @ApiNotFoundResponse({ description: 'Ticket not booked for id', status: HttpStatus.NOT_FOUND })\n    @Patch('/ticketCancelled/:id')\n    ticketCancelled(@Param('id')id: number): Promise {\n        return this.ticketService.ticketCancelled(id)\n    }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TicketDto.html":{"url":"classes/TicketDto.html","title":"class - TicketDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TicketDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/ticketbooking/dto/ticketbooking.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                ticket booking class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                age\n                            \n                            \n                                fare\n                            \n                            \n                                from\n                            \n                            \n                                gender\n                            \n                            \n                                id\n                            \n                            \n                                meal_preference\n                            \n                            \n                                name\n                            \n                            \n                                sataus\n                            \n                            \n                                seat_number\n                            \n                            \n                                to\n                            \n                            \n                                trevalsBookingDate\n                            \n                            \n                                trevalsDate\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty({message: 'Age can not be empty'})@IsNumber()@MinLength(1, {message: 'Age minimum one digit'})@MaxLength(3, {message: 'Age should be maximum 3 digit'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ticketbooking/dto/ticketbooking.dto.ts:32\n                        \n                    \n\n            \n                \n                    ticket booking age colume name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fare\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty({message: 'Trevals fare can not be empty'})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ticketbooking/dto/ticketbooking.dto.ts:80\n                        \n                    \n\n            \n                \n                    trevals fare\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        from\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty({message: 'Trevals place can not be empty'})@IsString({message: 'Trevals place name  should be letter'})@MinLength(2, {message: 'Trevals minimum five leter'})@MaxLength(100, {message: 'Trevals should be maximum 100 leters'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ticketbooking/dto/ticketbooking.dto.ts:50\n                        \n                    \n\n            \n                \n                    trevals starting place\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty({message: 'Gender can not be empty'})@IsString({message: 'Gender should be string'})@MinLength(5, {message: 'Gender minimum five leter'})@MaxLength(6, {message: 'Gender should be maximum 6 leters'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ticketbooking/dto/ticketbooking.dto.ts:41\n                        \n                    \n\n            \n                \n                    Ticket booking gender name colume\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/ticketbooking/dto/ticketbooking.dto.ts:14\n                        \n                    \n\n            \n                \n                    ticket booking id colume name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        meal_preference\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Meal\n\n                    \n                \n                    \n                        \n                                Defined in src/ticketbooking/dto/ticketbooking.dto.ts:84\n                        \n                    \n\n            \n                \n                    meal_preference enume type colume name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty({message: 'Name can not be empty'})@IsString({message: 'Name should be string'})@MinLength(3, {message: 'Name minimum three leter'})@MaxLength(100, {message: 'Name should be maximum 100 leters'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ticketbooking/dto/ticketbooking.dto.ts:23\n                        \n                    \n\n            \n                \n                    Ticket booking passanger name colume\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sataus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Status\n\n                    \n                \n                    \n                        \n                                Defined in src/ticketbooking/dto/ticketbooking.dto.ts:95\n                        \n                    \n\n            \n                \n                    Ticket booking colume name book/cancel\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seat_number\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty({message: 'Seat Number can not be empty'})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ticketbooking/dto/ticketbooking.dto.ts:91\n                        \n                    \n\n            \n                \n                    ticket booking seat number colume name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        to\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty({message: 'Trevals end place name can not be empty'})@IsString({message: 'Trevals end place name should be letter'})@MinLength(2, {message: 'Trevals place name minimum five leter'})@MaxLength(100, {message: 'Trevals place name should be maximum 100 leters'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ticketbooking/dto/ticketbooking.dto.ts:59\n                        \n                    \n\n            \n                \n                    trelvals ending  place\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        trevalsBookingDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty({message: 'Trevals booking  date can not be empty'})@IsDate({message: 'Trevals booking date should be date'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ticketbooking/dto/ticketbooking.dto.ts:73\n                        \n                    \n\n            \n                \n                    trevalsBookingDate\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        trevalsDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty({message: 'Trevals date can not be empty'})@IsDate({message: 'Trevals date should be date'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ticketbooking/dto/ticketbooking.dto.ts:66\n                        \n                    \n\n            \n                \n                    trevals date\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                    \n                        \n                                Defined in src/ticketbooking/dto/ticketbooking.dto.ts:100\n                        \n                    \n\n            \n                \n                    relation creation\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsDate, IsNotEmpty, IsNumber, IsString, MaxLength, MinLength } from \"class-validator\";\nimport { User } from \"src/user/user.entity\";\nimport { Meal } from \"../meals/meals\";\nimport { Status } from \"../status/status\";\n/**\n * ticket booking class\n * @author Md Nasir Hussain\n */\nexport class TicketDto {\n      /**\n      * ticket booking id colume name\n      */\n      id: number;\n      /**\n       * Ticket booking passanger name colume\n       */\n      @ApiProperty()\n      @IsNotEmpty({ message: \"Name can not be empty\" })\n      @IsString({ message: \"Name should be string\" })\n      @MinLength(3, { message: \"Name minimum three leter\" })\n      @MaxLength(100, { message: \"Name should be maximum 100 leters\" })\n      name: string;\n      /**\n       * ticket booking age colume name\n       */\n      @ApiProperty()\n      @IsNotEmpty({ message: \"Age can not be empty\" })\n      @IsNumber()\n      @MinLength(1, { message: \"Age minimum one digit\" })\n      @MaxLength(3, { message: \"Age should be maximum 3 digit\" })\n      age: number;\n      /**\n       * Ticket booking gender name colume\n       */\n      @ApiProperty()\n      @IsNotEmpty({ message: \"Gender can not be empty\" })\n      @IsString({ message: \"Gender should be string\" })\n      @MinLength(5, { message: \"Gender minimum five leter\" })\n      @MaxLength(6, { message: \"Gender should be maximum 6 leters\" })\n      gender: string;\n      /**\n       * trevals starting place\n       */\n      @ApiProperty()\n      @IsNotEmpty({ message: \"Trevals place can not be empty\" })\n      @IsString({ message: \"Trevals place name  should be letter\" })\n      @MinLength(2, { message: \"Trevals minimum five leter\" })\n      @MaxLength(100, { message: \"Trevals should be maximum 100 leters\" })\n      from: string;\n      /**\n       * trelvals ending  place \n       */\n      @ApiProperty()\n      @IsNotEmpty({ message: \"Trevals end place name can not be empty\" })\n      @IsString({ message: \"Trevals end place name should be letter\" })\n      @MinLength(2, { message: \"Trevals place name minimum five leter\" })\n      @MaxLength(100, { message: \"Trevals place name should be maximum 100 leters\" })\n      to: string;\n      /**\n       * trevals date\n       */\n      @ApiProperty()\n      @IsNotEmpty({ message: \"Trevals date can not be empty\" })\n      @IsDate({ message: \"Trevals date should be date\" })\n      trevalsDate: string\n      /**\n       * trevalsBookingDate\n       */\n      @ApiProperty()\n      @IsNotEmpty({ message: \"Trevals booking  date can not be empty\" })\n      @IsDate({ message: \"Trevals booking date should be date\" })\n      trevalsBookingDate: string\n      /**\n       * trevals fare\n       */\n      @ApiProperty()\n      @IsNotEmpty({ message: \"Trevals fare can not be empty\" })\n      @IsNumber()\n      fare: number\n      /**\n       * meal_preference enume type colume name \n       */\n      meal_preference: Meal;\n      /**\n       * ticket booking seat number colume name\n       */\n      @ApiProperty()\n      @IsNotEmpty({ message: \"Seat Number can not be empty\" })\n      @IsNumber()\n      seat_number: number;\n      /**\n       * Ticket booking colume name book/cancel\n       */\n      sataus: Status;\n      /**\n       * relation creation\n       */\n\n      user: User;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TicketModule.html":{"url":"modules/TicketModule.html","title":"module - TicketModule","body":"\n                   \n\n\n\n\n    Modules\n    TicketModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_TicketModule\n\n\n\ncluster_TicketModule_providers\n\n\n\n\nTicketService\n\nTicketService\n\n\n\nTicketModule\n\nTicketModule\n\nTicketModule -->\n\nTicketService->TicketModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/ticketbooking/ticketbooking.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            ticket module\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TicketService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TicketController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { User } from \"src/user/user.entity\";\nimport { UserRepository } from \"src/user/user.repository\";\nimport { TicketController } from \"./ticketbooking.controller\";\nimport { TicketBooking } from \"./ticketbooking.entity\";\nimport { TicketRepository } from \"./ticketbooking.repository\";\nimport { TicketService } from \"./ticketbooking.service\";\n/**\n * ticket module\n * @author Md Nasir Hussain\n */\n@Module({\n    imports:[TypeOrmModule.forFeature([TicketBooking,TicketRepository,User,UserRepository,])],\n    exports:[],\n    providers:[TicketService],\n    controllers:[TicketController],\n})\n/**\n * TicketModule\n */\nexport class TicketModule\n{\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TicketRepository.html":{"url":"classes/TicketRepository.html","title":"class - TicketRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TicketRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/ticketbooking/ticketbooking.repository.ts\n        \n\n\n            \n                Description\n            \n            \n                ticket repository performs crude opration\n\n            \n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findUserByQueryBuilder\n                            \n                            \n                                    Async\n                                updateQueryBuilder\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findUserByQueryBuilder\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserByQueryBuilder(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/ticketbooking/ticketbooking.repository.ts:15\n                \n            \n\n\n            \n                \n                    findUserByQueryBuilder\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        path\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateQueryBuilder\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateQueryBuilder(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/ticketbooking/ticketbooking.repository.ts:27\n                \n            \n\n\n            \n                \n                    updateQueryBuilder\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        path\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository, Repository } from \"typeorm\";\nimport { TicketBooking } from \"./ticketbooking.entity\";\nimport { Status } from \"./status/status\";\n/**\n * ticket repository performs crude opration\n * @author Md Nasir Hussain\n */\n@EntityRepository(TicketBooking)\nexport class TicketRepository extends Repository{\n    /**\n     * findUserByQueryBuilder\n     * @param id path\n     * @returns if success or failure\n     */\n    async findUserByQueryBuilder(id: number) {\n        /**\n         * select id,name from ticket_booking\n         */\n        return await this.query('select id,name from ticket_booking')\n        //return await this.query('select id,name from ticket_booking where id=?',[id]);\n    }\n    /**\n     * updateQueryBuilder\n     * @param id path\n     * @returns if success or failure\n     */\n    async updateQueryBuilder(id: number) {\n        return await this\n            .createQueryBuilder()\n            .update(TicketBooking)\n            .set({ name: \"cancelled\" })\n            //.where(\"id = :id\", { id: [id] })\n            .where(\"id = :id\", [id])\n            .execute();\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TicketService.html":{"url":"injectables/TicketService.html","title":"injectable - TicketService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TicketService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/ticketbooking/ticketbooking.service.ts\n        \n\n\n            \n                Description\n            \n            \n                TicketService, we write business logic here\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findBookingTicketById\n                            \n                            \n                                    Async\n                                findTicketBookedByName\n                            \n                            \n                                    Async\n                                findUserTicketById\n                            \n                            \n                                    Async\n                                tickectCancel\n                            \n                            \n                                    Async\n                                ticketBooking\n                            \n                            \n                                    Async\n                                ticketBookingList\n                            \n                            \n                                    Async\n                                ticketCancelled\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(ticketRepo: TicketRepository, userRepo: UserRepository)\n                    \n                \n                        \n                            \n                                Defined in src/ticketbooking/ticketbooking.service.ts:11\n                            \n                        \n\n                \n                    \n                            ticket repository\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        ticketRepo\n                                                  \n                                                        \n                                                                        TicketRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                path\n\n                                                        \n                                                \n                                                \n                                                        userRepo\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findBookingTicketById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findBookingTicketById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/ticketbooking/ticketbooking.service.ts:73\n                \n            \n\n\n            \n                \n                    findBookingTicketById\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        passing path\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        if success or failur\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findTicketBookedByName\n                        \n                    \n                \n            \n            \n                \n                    \n                    findTicketBookedByName(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/ticketbooking/ticketbooking.service.ts:94\n                \n            \n\n\n            \n                \n                    findTicketBookedByName\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        paasing path\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findUserTicketById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserTicketById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/ticketbooking/ticketbooking.service.ts:161\n                \n            \n\n\n            \n                \n                    find ticket by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        path\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        tickectCancel\n                        \n                    \n                \n            \n            \n                \n                    \n                    tickectCancel(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/ticketbooking/ticketbooking.service.ts:138\n                \n            \n\n\n            \n                \n                    tickectCancel\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        passing path\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        ticketBooking\n                        \n                    \n                \n            \n            \n                \n                    \n                    ticketBooking(ticket: TicketDto)\n                \n            \n\n\n            \n                \n                    Defined in src/ticketbooking/ticketbooking.service.ts:24\n                \n            \n\n\n            \n                \n                    ticket booking here\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ticket\n                                    \n                                                TicketDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        passing path\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        ticketBookingList\n                        \n                    \n                \n            \n            \n                \n                    \n                    ticketBookingList(ticket: TicketDto)\n                \n            \n\n\n            \n                \n                    Defined in src/ticketbooking/ticketbooking.service.ts:52\n                \n            \n\n\n            \n                \n                    ticketBookingList\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ticket\n                                    \n                                                TicketDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        passing path\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        ticketCancelled\n                        \n                    \n                \n            \n            \n                \n                    \n                    ticketCancelled(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/ticketbooking/ticketbooking.service.ts:182\n                \n            \n\n\n            \n                \n                    updateQueryBuilder\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        path\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpCode, HttpException, HttpStatus, Injectable, InternalServerErrorException } from \"@nestjs/common\";\nimport { UserRepository } from \"src/user/user.repository\";\nimport { TicketDto } from \"./dto/ticketbooking.dto\";\nimport { Status } from \"./status/status\";\nimport { TicketRepository } from \"./ticketbooking.repository\";\n/**\n * TicketService, we write business logic here\n * @author Md Nasir Hussain\n */\n@Injectable()\nexport class TicketService {\n    /**\n     * ticket repository\n     * @param ticketRepo path\n     */\n    constructor(private ticketRepo: TicketRepository,\n        private userRepo: UserRepository) { }\n\n    /**\n      * ticket booking here\n      * @param ticket passing path\n      * @returns if success or failure\n      */\n    async ticketBooking(ticket: TicketDto): Promise {\n        try {\n            //let userResponse = await this.userRepo.save(ticket.user)\n            //console.log(\"=========user repo========\"+userResponse)\n            //let response = await this.ticketRepo.save({...ticket,ticket:userResponse})\n            //console.log(\"=========Ticket repo========\"+response);\n            let response = await this.ticketRepo.save(ticket)\n            if (response) {\n                const message: string = \"Ticket booked successfully\";\n                return message;\n            }\n            else {\n                const message: string = \"Ticket not booked successfully\";\n                throw new InternalServerErrorException(message);\n            }\n        }\n        catch (error) {\n            if (error.errno === 1062) {\n                const message: string = \"This ticket already booked please try another\";\n                throw new InternalServerErrorException(message);\n            }\n        }\n    }\n    /**\n     * ticketBookingList\n     * @param ticket passing path\n     * @returns if success or failure\n     */\n    async ticketBookingList(ticket: TicketDto): Promise {\n        try {\n            let response = await this.ticketRepo.find();\n            if (response) {\n\n                return response;\n            }\n            else {\n                const message: string = \"Ticket not booked\";\n                throw new InternalServerErrorException(message);\n            }\n        }\n        catch (error) {\n            throw new InternalServerErrorException(error.message);\n        }\n    }\n    /**\n     * findBookingTicketById\n     * @param id passing path\n     * @returns if success or failur\n     */\n    async findBookingTicketById(id: number) {\n        try {\n            let response = await this.ticketRepo.findOne(id);\n            if (response) {\n                return response;\n            }\n            else {\n                const message: string = \"Ticket not booked for id  \" + id;\n                throw new InternalServerErrorException(message);\n            }\n        }\n        catch (error) {\n            throw new InternalServerErrorException(error.message);\n\n        }\n    }\n    /**\n     * findTicketBookedByName\n     * @param name paasing path\n     * @returns if success or failure\n     */\n    async findTicketBookedByName(name: string): Promise {\n        try {\n            let response = await this.ticketRepo.find({ name: name })\n            if (response) {\n                return response;\n            }\n            else {\n                const message: string = \"Ticked not booked by this name \" + name;\n                throw new InternalServerErrorException(message);\n            }\n        }\n        catch (error) {\n            throw new InternalServerErrorException(error.message);\n        }\n    }\n    /**\n     * updateTicketBookingDetails\n     * @param id passing path\n     * @param ticlet passing path\n     * @returns if success or failure\n     */\n    /*\n    async updateTicketBookingDetails(id: number, ticlet: TicketDto): Promise {\n        try {\n            let response = await this.ticketRepo.update(id,ticlet);\n            if (response) {\n                const message: string = \"Ticket details updated successfully\";\n                return message;\n            }\n            else {\n                const message: string = \"Ticket details not updated Pleas try again\";\n                throw new InternalServerErrorException(message);\n            }\n        }\n        catch (error) {\n            throw new InternalServerErrorException(error.message);\n        }\n    }\n    */\n    /**\n     * tickectCancel\n     * @param id passing path\n     * @returns if success or failure\n     */\n    async tickectCancel(id: number) {\n        try {\n            let response = await this.ticketRepo.delete(id)\n            if (response.affected > 0) {\n                const message: string = \"Ticket cancelled successfully\";\n                return message;\n            }\n            else {\n                const message: string = \"Ticket not cancelled successfully\";\n                throw new InternalServerErrorException(message);\n            }\n        }\n        catch (error) {\n            throw new InternalServerErrorException(error.message);\n        }\n    }\n\n    /**\n     * find ticket by id\n     * @param id path\n     * @returns if success or failure\n     */\n\n    async findUserTicketById(id: number) {\n        try {\n            let response = await this.ticketRepo.findUserByQueryBuilder(id)\n            if (response) {\n\n                return response;\n            }\n            else {\n                const message: string = \"Ticket not found by this id \" + id;\n                throw new InternalServerErrorException(message);\n            }\n        }\n        catch (error) {\n            throw new InternalServerErrorException(error.message);\n        }\n    }\n    /**\n     * updateQueryBuilder\n     * @param id path\n     * @returns if success or failure\n     */\n    async ticketCancelled(id: number): Promise {\n        try {\n            let response = await this.ticketRepo.updateQueryBuilder(id)\n            if (response) {\n                const message: string = \"Ticket cancelled successfullly\";\n                return\n            }\n            else {\n                const message: string = \"Ticket not cancelled succcessfully\";\n                throw new InternalServerErrorException(message);\n            }\n        }\n        catch (error) {\n            throw new InternalServerErrorException(error.message);\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransformInterceptor.html":{"url":"injectables/TransformInterceptor.html","title":"injectable - TransformInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransformInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/transform-interceptor/transform.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                TransformInterceptor class\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/common/transform-interceptor/transform.interceptor.ts:25\n                \n            \n\n\n            \n                \n                    ExecutionContext\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        path\n\n                                    \n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        path\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        if succcess or failure\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestInterceptor, ExecutionContext, CallHandler } from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n/**\n * interface response class\n * @author Md Nasir Hussain\n */\nexport interface Response {\n  /**\n   * create object\n   */\n  data: T;\n}\n/**\n * TransformInterceptor class\n */\n@Injectable()\nexport class TransformInterceptor implements NestInterceptor> {\n  /**\n   * ExecutionContext\n   * @param context  path\n   * @param next path\n   * @returns if succcess or failure\n   */\n  intercept(context: ExecutionContext, next: CallHandler): Observable> {\n    /**\n     * return maping data\n     */\n    return next.handle().pipe(map(data => ({ data })));\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                user class mapping databse table colume name here\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                age\n                            \n                            \n                                emailId\n                            \n                            \n                                gender\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                phone\n                            \n                            \n                                role\n                            \n                            \n                                ticketBooking\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:50\n                        \n                    \n\n            \n                \n                    user  age colume name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        emailId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:25\n                        \n                    \n\n            \n                \n                    user email id unique colume\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:45\n                        \n                    \n\n            \n                \n                    user gender colume name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:15\n                        \n                    \n\n            \n                \n                    user id PrimaryGeneratedColumn\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:20\n                        \n                    \n\n            \n                \n                    user colume name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:35\n                        \n                    \n\n            \n                \n                    user password colume\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:30\n                        \n                    \n\n            \n                \n                    user contact number\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: Role, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:40\n                        \n                    \n\n            \n                \n                    user role define here\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ticketBooking\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TicketBooking[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, ticketBooking => ticketBooking.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:53\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { IsNotEmpty, IsNumber, IsString, MaxLength, MinLength } from \"class-validator\";\nimport { TicketBooking } from \"src/ticketbooking/ticketbooking.entity\";\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn } from \"typeorm\";\nimport { Role } from \"./roles/role\";\n/**\n * user class mapping databse table colume name here\n * @author Md Nasir Hussain\n */\n@Entity()\nexport class User {\n      /**\n      * user id PrimaryGeneratedColumn\n      */\n      @PrimaryGeneratedColumn()\n      id: number\n      /**\n       * user colume name\n       */\n      @Column()\n      name: string\n      /**\n       * user email id unique colume\n       */\n      @Column({ unique: true })\n      emailId: string\n      /**\n       * user contact number\n       */\n      @Column()\n      phone: number\n      /**\n       * user password colume\n       */\n      @Column()\n      password: string\n      /**\n       * user role define here\n       */\n      @Column({ type: 'enum', enum: Role, default: Role.User })\n      role: Role\n      /**\n       * user gender colume name\n       */\n      @Column()\n      gender: string\n      /**\n       * user  age colume name\n       */\n      @Column()\n      age: number\n\n      @OneToMany(() => TicketBooking, ticketBooking => ticketBooking.user)\n     ticketBooking: TicketBooking[]; \n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n            \n                Description\n            \n            \n                user controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findUserByName\n                            \n                            \n                                findUserList\n                            \n                            \n                                userDeleteById\n                            \n                            \n                                userFindById\n                            \n                            \n                                userLogin\n                            \n                            \n                                userRegister\n                            \n                            \n                                userUpdate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        findUserByName\n                        \n                    \n                \n            \n            \n                \nfindUserByName(name: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/findUserByName/:name')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:67\n                \n            \n\n\n            \n                \n                    find user by name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        passing path\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findUserList\n                        \n                    \n                \n            \n            \n                \nfindUserList(user: UserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/findUserList')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:46\n                \n            \n\n\n            \n                \n                    find all user list here\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        passing user obj\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userDeleteById\n                        \n                    \n                \n            \n            \n                \nuserDeleteById(id: UserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/userDeleteById/:id')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:89\n                \n            \n\n\n            \n                \n                    userDeleteById by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        passing path\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userFindById\n                        \n                    \n                \n            \n            \n                \nuserFindById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/userFindById/:id')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:57\n                \n            \n\n\n            \n                \n                    find user particular recourd by id\nmethod level exception\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        passing id here\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        if success or failure\nmethod level exception\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userLogin\n                        \n                    \n                \n            \n            \n                \nuserLogin(userLogin: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/userLogin')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:35\n                \n            \n\n\n            \n                \n                    user validating\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userLogin\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        path\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userRegister\n                        \n                    \n                \n            \n            \n                \nuserRegister(user: UserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/register')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:26\n                \n            \n\n\n            \n                \n                    user registering here\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        passing user obj\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userUpdate\n                        \n                    \n                \n            \n            \n                \nuserUpdate(id: number, userUpdate: UserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/userUpdateById/:id')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:78\n                \n            \n\n\n            \n                \n                    userUpdateById updated by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        passing path here\n\n                                    \n                                \n                                \n                                    userUpdate\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        userUpdate passing path here\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, Param, ParseIntPipe, Post, Put } from \"@nestjs/common\";\nimport { ApiTags } from \"@nestjs/swagger\";\nimport { UserDto } from \"./dto/user.dto\";\nimport { LoginDto } from \"./login.dto\";\nimport { UserService } from \"./user.service\";\n/**\n * user controller\n * @author Md Nasir Hussain\n */\n @ApiTags('User')\n@Controller('user')\nexport class UserController\n{\n/**\n     * user business  logic class injectable here\n     * @param userService \n     */\n constructor(private userService: UserService) { }\n /**\n  * user registering here\n  * @param user passing user obj\n  * @returns if success or failure\n  */\n\n @Post('/register')\n userRegister(@Body() user: UserDto): Promise {\n     return this.userService.userRegister(user);\n }\n/**\n * user validating\n * @param userLogin  path\n * @returns if success or failure\n */\n @Post('/userLogin')\n userLogin(@Body() userLogin: LoginDto):Promise {\n     return this.userService.userLogin(userLogin)\n }\n /**\n  * find all user list here\n  * @param user  passing user obj\n  * @returns if success or failure\n  */\n //@UseGuards(JwtAuthGuard)\n\n @Get('/findUserList')\n findUserList(user: UserDto): Promise {\n     return this.userService.findUserList(user);\n }\n /**\n  * find user particular recourd by id\n  * @param id passing id here\n  * @returns if success or failure\n  * method level exception\n  */\n //@UseFilters(ExceptionExceptionFilter)\n @Get('/userFindById/:id')\n userFindById(@Param('id', ParseIntPipe) id: number) {\n     return this.userService.userFindById(id);\n }\n /**\n  * find user by name\n  * @param name passing path\n  * @returns if success or failure\n  */\n\n @Get('/findUserByName/:name')\n findUserByName(@Param('name') name: string): Promise {\n     return this.userService.findUserByName(name);\n }\n \n /**\n  * userUpdateById updated by id\n  * @param id passing path here\n  * @param userUpdate  userUpdate passing path here\n  * @returns if success or failure\n  */\n @Put('/userUpdateById/:id')\n userUpdate(@Param('id') id: number, @Body() userUpdate: UserDto) {\n     return this.userService.userUpdate(id, userUpdate);\n }\n /**\n  * userDeleteById by id\n  * @param id  passing path\n  * @returns if success or failure\n  */\n //@Roles(Role.Admin)\n //@UseGuards(RolesGuard)\n @Delete('/userDeleteById/:id')\n userDeleteById(@Param('id') id: UserDto) {\n     return this.userService.userDeleteById(id);\n }\n\n \n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserDto.html":{"url":"classes/UserDto.html","title":"class - UserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                user dto class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                age\n                            \n                            \n                                emailId\n                            \n                            \n                                gender\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                phone\n                            \n                            \n                                role\n                            \n                            \n                                ticketBooking\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'User age can not be empty'})@IsNumber()@MinLength(1, {message: 'User age minimum one year'})@MaxLength(3, {message: 'User age should be maximum 3 digit'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:62\n                        \n                    \n\n            \n                \n                    user age colume name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        emailId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'User eamil can not be empty'})@MinLength(3, {message: 'User email minimum three leter'})@MaxLength(100, {message: 'User email should be maximum 100 leters'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:27\n                        \n                    \n\n            \n                \n                    user email colume name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'User gender can not be empty'})@IsString({message: 'User gender should be string'})@MinLength(5, {message: 'User gender minimum five leter'})@MaxLength(6, {message: 'User gender should be maximum 6 leters'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:54\n                        \n                    \n\n            \n                \n                    user gender colume name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:12\n                        \n                    \n\n            \n                \n                    user id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'User name can not be empty'})@IsString({message: 'User name should be string'})@MinLength(3, {message: 'User name minimum three leter'})@MaxLength(100, {message: 'User name should be maximum 100 leters'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:20\n                        \n                    \n\n            \n                \n                    user colume name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'User password can not be empty'})@MinLength(3, {message: 'User password minimum three leter or number'})@MaxLength(100, {message: 'User name should be maximum 100 leters'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:42\n                        \n                    \n\n            \n                \n                    user password colume name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'User phone number can not be empty'})@IsNumber()@MinLength(10, {message: 'User phone number should be minimum 10 digit numbers'})@MaxLength(100, {message: 'User phone number should be maximum 10 didgit numbers'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:35\n                        \n                    \n\n            \n                \n                    user contact number\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:46\n                        \n                    \n\n            \n                \n                    rolse added here\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ticketBooking\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TicketBooking[]\n\n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:66\n                        \n                    \n\n            \n                \n                    creating relation here\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsNumber, IsString, MaxLength, MinLength } from \"class-validator\"\nimport { TicketBooking } from \"src/ticketbooking/ticketbooking.entity\"\nimport { Role } from \"../roles/role\"\n/**\n * user dto class\n * @author Md Nasir Hussain\n */\nexport class UserDto {\n      /**\n      * user id\n      */\n      id: number\n      /**\n       * user colume name\n       */\n      @IsNotEmpty({ message: \"User name can not be empty\" })\n      @IsString({ message: \"User name should be string\" })\n      @MinLength(3, { message: \"User name minimum three leter\" })\n      @MaxLength(100, { message: \"User name should be maximum 100 leters\" })\n      name: string\n      /**\n       * user email colume name\n       */\n      @IsNotEmpty({ message: \"User eamil can not be empty\" })\n      @MinLength(3, { message: \"User email minimum three leter\" })\n      @MaxLength(100, { message: \"User email should be maximum 100 leters\" })\n      emailId: string\n      /**\n       * user contact number\n       */\n      @IsNotEmpty({ message: \"User phone number can not be empty\" })\n      @IsNumber()\n      @MinLength(10, { message: \"User phone number should be minimum 10 digit numbers\" })\n      @MaxLength(100, { message: \"User phone number should be maximum 10 didgit numbers\" })\n      phone: number\n      /**\n       * user password colume name\n       */\n      @IsNotEmpty({ message: \"User password can not be empty\" })\n      @MinLength(3, { message: \"User password minimum three leter or number\" })\n      @MaxLength(100, { message: \"User name should be maximum 100 leters\" })\n      password: string\n      /**\n       * rolse added here\n       */\n      role: Role\n      /**\n       * user gender colume name\n       */\n      @IsNotEmpty({ message: \"User gender can not be empty\" })\n      @IsString({ message: \"User gender should be string\" })\n      @MinLength(5, { message: \"User gender minimum five leter\" })\n      @MaxLength(6, { message: \"User gender should be maximum 6 leters\" })\n      gender: string\n      /**\n       * user age colume name\n       */\n      @IsNotEmpty({ message: \"User age can not be empty\" })\n      @IsNumber()\n      @MinLength(1, { message: \"User age minimum one year\" })\n      @MaxLength(3, { message: \"User age should be maximum 3 digit\" })\n      age: number\n      /**\n       * creating relation here\n       */\n      ticketBooking: TicketBooking[];\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\n\n\nUserModule\n\nUserModule\n\nJwtStrategy  -->\n\nUserModule->JwtStrategy \n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nUserModule -->\n\nJwtStrategy->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            user module injectable\ninjectable TypeOrmModule\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            JwtStrategy\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            JwtStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { JwtModule } from \"@nestjs/jwt\";\nimport { PassportModule } from \"@nestjs/passport\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { TicketBooking } from \"src/ticketbooking/ticketbooking.entity\";\nimport { TicketRepository } from \"src/ticketbooking/ticketbooking.repository\";\nimport { JwtStrategy } from \"./jwt/jwt.strategy\";\nimport { UserController } from \"./user.controller\";\nimport { User } from \"./user.entity\";\nimport { UserRepository } from \"./user.repository\";\nimport { UserService } from \"./user.service\";\n/**\n * user module injectable\n * injectable TypeOrmModule \n */\n@Module({\n    imports: [\n        PassportModule.register({ defaultStrategy: 'jwt' }),\n        JwtModule.register({\n            secret: 'topSecret51',\n            signOptions: {\n                expiresIn: '180s'\n            }\n        }),\n        TypeOrmModule.forFeature([User, UserRepository,TicketBooking,TicketRepository])\n    ],\n    //exports:[TypeOrmModule,JwtStrategy,PassportModule],\n    exports: [JwtStrategy,PassportModule],\n    providers: [UserService,JwtStrategy],\n    controllers: [UserController],\n})\n/**\n * user module class\n * @author hotel managements\n */\nexport class UserModule {\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRepository.html":{"url":"classes/UserRepository.html","title":"class - UserRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.repository.ts\n        \n\n\n            \n                Description\n            \n            \n                user repository class responsible for crude opretion\n\n            \n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository, Repository } from \"typeorm\";\nimport { User } from \"./user.entity\";\n/**\n * user repository class responsible for crude opretion\n * @author Md Nasir Hussain\n */\n@EntityRepository(User)\nexport class UserRepository extends Repository{}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n            \n                Description\n            \n            \n                user service class here we will write business logic\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findUserByName\n                            \n                            \n                                    Async\n                                findUserList\n                            \n                            \n                                    Async\n                                userDeleteById\n                            \n                            \n                                    Async\n                                userFindById\n                            \n                            \n                                    Async\n                                userLogin\n                            \n                            \n                                    Async\n                                userRegister\n                            \n                            \n                                    Async\n                                userUpdate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepo: UserRepository, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:13\n                            \n                        \n\n                \n                    \n                            \nuser service class is inject here user repository class\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepo\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findUserByName\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserByName(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:132\n                \n            \n\n\n            \n                \n                    find by user name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        passing name\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findUserList\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserList(user: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:92\n                \n            \n\n\n            \n                \n                    findUserList here\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        information\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        userDeleteById\n                        \n                    \n                \n            \n            \n                \n                    \n                    userDeleteById(id: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:178\n                \n            \n\n\n            \n                \n                    userDeleteById\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        passing path here\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        userFindById\n                        \n                    \n                \n            \n            \n                \n                    \n                    userFindById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:112\n                \n            \n\n\n            \n                \n                    user finding by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        userLogin\n                        \n                    \n                \n            \n            \n                \n                    \n                    userLogin(userLogin: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:60\n                \n            \n\n\n            \n                \n                    validate the user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userLogin\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        userRegister\n                        \n                    \n                \n            \n            \n                \n                    \n                    userRegister(user: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:25\n                \n            \n\n\n            \n                \n                    user registering\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        userUpdate\n                        \n                    \n                \n            \n            \n                \n                    \n                    userUpdate(id: number, userUpdate: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:155\n                \n            \n\n\n            \n                \n                    user updated by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    userUpdate\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        passing path for update\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        if success or failure\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Body, ForbiddenException, HttpException, HttpStatus, Injectable, InternalServerErrorException, Param, UnauthorizedException } from \"@nestjs/common\";\nimport { UserDto } from \"./dto/user.dto\";\nimport { UserRepository } from \"./user.repository\";\nimport * as bcrypt from 'bcryptjs';\nimport { LoginDto } from \"./login.dto\";\nimport { JwtService } from \"@nestjs/jwt\";\nimport { JwtPayload } from \"./jwt/jwt-payload.interface\";\n/**\n * user service class here we will write business logic\n * @author Md Nasir Hussain\n */\n@Injectable()\nexport class UserService {\n    /**\n         * * user service class is inject here user repository class\n         * @param userRepo \n         */\n    constructor(private userRepo: UserRepository,\n        private jwtService:JwtService) { }\n    /**\n     * user registering\n     * @param user \n     * @returns if success or failure\n     */\n    async userRegister(user: UserDto): Promise {\n        try {\n            const { password } = user;\n            const salt = await bcrypt.genSalt();\n            const hashedPassword = await bcrypt.hash(password, salt);\n            console.log(\"hashedPassword  \" + hashedPassword);\n            \n            let response = await this.userRepo.save({ ...user, password: hashedPassword })\n            // user.password=hashedPassword;\n            //let response =await this.userRepo.save(user)\n           // let response = await this.userRepo.save(user)\n            console.log(\"Response Password\" + response);\n            if (response) {\n                const message: string = \"User registerd successfully\";\n                return message;\n            }\n            else {\n                const message: string = \"User not registered successfully,Please try again later\";\n                throw new InternalServerErrorException(message);\n            }\n        }\n        catch (error) {\n            if (error.errno === 1062) {\n                const message: string = \"User already registered\";\n                throw new InternalServerErrorException(message);\n            }\n        }\n    }\n\n    /**\n     * validate the user \n     * @param email user validated by email colume\n     * @param pass  user password validated\n     * @returns  if success or failure\n     */\n     async userLogin(userLogin: LoginDto):Promise {\n        try {\n            const userInfo = await this.userRepo.findOneOrFail({emailId: userLogin.emailId})\n            if (userInfo && await bcrypt.compare(userLogin.password, userInfo.password)) {\n\n                const payload: JwtPayload = { emailId: userInfo.emailId };\n                let token = this.jwtService.sign(payload);\n               console.log(token);\n                //return {token,status:'Login successfully'};\n                return {token}\n            }\n            else {\n                //const message: string = \"Invalid Credential\";\n                //throw new ForbiddenException(message)\n                throw new UnauthorizedException('Invalid Credential');\n            }\n        }\n        catch (error) {\n            if (error?.status === 401) {\n                // throw new ForbiddenException(error.message);\n                throw new UnauthorizedException('Invalid Credential');\n\n            }\n\n            throw new HttpException(error.message, HttpStatus.INTERNAL_SERVER_ERROR)\n        }\n    }\n    /**\n     * findUserList here\n     * @param user information\n     * @returns if success or failure\n     */\n    async findUserList(user: UserDto): Promise {\n        try {\n            let response = await this.userRepo.find()\n            if (response) {\n                return response;\n            }\n            else {\n                const message: string = \"User not found\";\n                throw new InternalServerErrorException(message);\n            }\n        }\n        catch (error) {\n            throw new InternalServerErrorException(error.message);\n        }\n    }\n    /**\n     * user finding by id\n     * @param id \n     * @returns if success or failure\n     */\n    async userFindById(id: number) {\n        try {\n            let response = await this.userRepo.findOne(id);\n            if (response) {\n                return response;\n            }\n            else {\n                const message: string = \"User not found by this id\";\n                throw new InternalServerErrorException(message);\n            }\n        }\n        catch (error) {\n            throw new InternalServerErrorException(error.message);\n        }\n    }\n    /**\n     * find by user name\n     * @param name passing name \n     * @returns if success or failure\n     */\n    async findUserByName(name: string): Promise {\n        try {\n            let response = await this.userRepo.find({ name: name });\n            console.log(\"response\" + response);\n            if (response) {\n                console.log(response);\n                return response;\n            }\n            else {\n                const message: string = \"User not found by this name\";\n                throw new InternalServerErrorException(message);\n            }\n        }\n        catch (error) {\n            throw new InternalServerErrorException(error.message)\n        }\n    }\n    \n    /**\n     * user updated by id\n     * @param userUpdate passing path for update\n     * @returns if success or failure\n     */\n    async userUpdate(@Param('id') id: number, @Body() userUpdate: UserDto) {\n        {\n            try {\n                let response = await this.userRepo.update(id, userUpdate);\n                if (response) {\n                    const message: string = \"User updated successfully\";\n                    return message;\n                }\n                else {\n                    const message: string = \"User not updated successfully\";\n                    throw new InternalServerErrorException(message);\n                }\n            }\n            catch (error) {\n                throw new HttpException(error.messsage, HttpStatus.INTERNAL_SERVER_ERROR);\n            }\n        }\n    }\n    /**\n     * userDeleteById\n     * @param id  passing path here\n     * @returns if success or failure\n     */\n    async userDeleteById(id: UserDto) {\n        try {\n            let response = await this.userRepo.delete(id)\n            if (response.affected > 0) {\n                const message: string = \"User deleted successfully with id:\" + id;\n                return message;\n            }\n            else {\n                const message: string = \"User not deleted successfully\";\n                throw new ForbiddenException(message);\n            }\n        }\n        catch (error) {\n            throw new InternalServerErrorException(error.message);\n\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ValidationPipeOptions.html":{"url":"interfaces/ValidationPipeOptions.html","title":"interface - ValidationPipeOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ValidationPipeOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/validationPipe/validationPipeOptions.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                ValidationPipeOptions interface\n\n            \n\n            \n                Extends\n            \n            \n                    ValidatorOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            disableErrorMessages\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            exceptionFactory\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            transform\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        disableErrorMessages\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disableErrorMessages:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    disable message\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        exceptionFactory\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        exceptionFactory:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    validatein message\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        transform\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        transform:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    enable/disable validation\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ValidationError, ValidatorOptions } from \"class-validator\";\n/**\n * ValidationPipeOptions interface\n * @author Md Nasir Hussain\n */\nexport interface ValidationPipeOptions extends ValidatorOptions {\n  /**\n   * enable/disable validation\n   */\n    transform?: boolean;\n    /**\n     * disable message\n     */\n    disableErrorMessages?: boolean;\n    /**\n     * validatein message\n     */\n    exceptionFactory?: (errors: ValidationError[]) => any;\n  }\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/custom-exception/custom-exception.exception.ts\n            \n            class\n            CustomException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/exception-filter/exception-filter.filter.ts\n            \n            class\n            ExceptionExceptionFilter\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/transform-interceptor/transform.interceptor.ts\n            \n            injectable\n            TransformInterceptor\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/transform-interceptor/transform.interceptor.ts\n            \n            interface\n            Response\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/validationPipe/validationPipeOptions.interface.ts\n            \n            interface\n            ValidationPipeOptions\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/ticketbooking/dto/ticketbooking.dto.ts\n            \n            class\n            TicketDto\n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                src/ticketbooking/ticketbooking.controller.ts\n            \n            controller\n            TicketController\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/ticketbooking/ticketbooking.entity.ts\n            \n            entity\n            TicketBooking\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/ticketbooking/ticketbooking.repository.ts\n            \n            class\n            TicketRepository\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/ticketbooking/ticketbooking.service.ts\n            \n            injectable\n            TicketService\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/user/dto/user.dto.ts\n            \n            class\n            UserDto\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/user/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/user/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/user/jwt/jwt-payload.interface.ts\n            \n            interface\n            JwtPayload\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/user/jwt/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/user/login.dto.ts\n            \n            class\n            LoginDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/user/role/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/user/role/roles.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/user/user.entity.ts\n            \n            entity\n            User\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/user/user.repository.ts\n            \n            class\n            UserRepository\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                100 %\n                (9/9)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.18\n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/jwt : ^8.0.0\n        \n            @nestjs/passport : ^8.1.0\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/schedule : ^1.0.2\n        \n            @nestjs/swagger : ^5.2.0\n        \n            @nestjs/typeorm : ^8.0.3\n        \n            bcryptjs : ^2.4.3\n        \n            cache-manager : ^3.6.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            fastify-swagger : ^4.13.1\n        \n            mysql : ^2.18.1\n        \n            mysql2 : ^2.3.3\n        \n            passport : ^0.5.2\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            swagger-ui-express : ^4.3.0\n        \n            typeorm : ^0.2.41\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Meal   (src/.../meals.ts)\n                        \n                        \n                            Role   (src/.../role.ts)\n                        \n                        \n                            Status   (src/.../status.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/ticketbooking/meals/meals.ts\n    \n        \n            \n                \n                    \n                        \n                        Meal\n                    \n                \n                    \n                        \n                            meals enum class\n\n                        \n                    \n                        \n                            \n                                 Yes\n                            \n                        \n                        \n                            \n                                Value : yes\n                            \n                        \n                        \n                            \n                                 No\n                            \n                        \n                        \n                            \n                                Value : no\n                            \n                        \n            \n        \n\n    src/user/roles/role.ts\n    \n        \n            \n                \n                    \n                        \n                        Role\n                    \n                \n                    \n                        \n                            user rolse define here\n\n                        \n                    \n                        \n                            \n                                 Admin\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 User\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n            \n        \n\n    src/ticketbooking/status/status.ts\n    \n        \n            \n                \n                    \n                        \n                        Status\n                    \n                \n                    \n                        \n                            status class\n\n                        \n                    \n                        \n                            \n                                 Booked\n                            \n                        \n                        \n                            \n                                Value : booked\n                            \n                        \n                        \n                            \n                                 Cancelled\n                            \n                        \n                        \n                            \n                                Value : cancelled\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                    main class\n\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TicketModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_TicketModule\n\n\n\ncluster_TicketModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nTicketModule\n\nTicketModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nTicketModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nUserModule->JwtStrategy \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nTicketService\n\nTicketService\n\nTicketModule -->\n\nTicketService->TicketModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nUserModule -->\n\nJwtStrategy->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    2 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/user/role/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: Role[]) => SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n            \n                \n                    check roles type here\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n            \n                \n                    rolse gurads\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
